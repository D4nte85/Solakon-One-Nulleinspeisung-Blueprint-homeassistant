blueprint:
  name: Solakon ONE Nulleinspeisung‚ö° (V99)
  description: |
    **Detaillierte Funktionsbeschreibung: Dynamische Nulleinspeisung mit SOC-Zonen-Logik**

    Dieser Blueprint regelt die AC-Ausgangsleistungsbegrenzung (AC-Output-Limit) des Solakon ONE Wechselrichters. Ziel ist die dynamische **Nulleinspeisung** durch einen Proportional-Regler (P-Regler), w√§hrend gleichzeitig die Batterie durch eine **dreistufige Ladestands-Logik (SOC)** effizient verwaltet wird.

    ---
    ### üß† P-Regler & Steuerungslogik
    * **Messprinzip (P-Regelung):** Die Steuerung arbeitet als **Proportional-Regler (P-Regler)** auf Basis der Entit√§t **Shelly/Netz-Leistungssensor**. Die Netzleistung ist die Regelabweichung:
      * **Positive Netzleistung** (Einspeisung): Erh√∂hung der AC-Output-Leistung.
      * **Negative Netzleistung** (Bezug): Verringerung der AC-Output-Leistung.
    * **Korrekturneigung:** Die Aggressivit√§t der Reaktion wird √ºber den **Anpassungs-Faktor** gesteuert.
    * **Trigger:** Die Automatisierung wird ausgel√∂st durch √Ñnderungen der Netzleistung (mit 3s Stabilit√§t), SOC-Schwellen und Moduswechsel.

    ---
    ### üîã Dreistufige SOC-Zonen-Logik

    #### 1. Schnelle Regelung & Entladezyklus (SOC > Obere Schwelle ODER Zyklus Aktiv)
    * **Bedingung:** Der SOC liegt √ºber der **Oberen Schwelle** (`soc_fast_limit`, Standard: 50%) ODER der Entladezyklus ist bereits aktiv.
    * **Modus:** "INV Discharge (PV Priority)".
    * **Regelung:** **Aggressive P-Regelung** mit einem **Nullpunkt-Offset von 0 W**. Steuert die Entladung und die exakte Nulleinspeisung.
    * **Remote Timeout:** Der Timer wird bei Unterschreitung von 120s zur√ºckgesetzt (auf 3599s).

    #### 2. Batterieschonende Regelung (Zwischen-SOC und Zyklus Inaktiv)
    * **Bedingung:** Der SOC liegt zwischen der **Unteren Schwelle** (20%) und der **Oberen Schwelle** (50%), und der Entladezyklus ist inaktiv.
    * **Modus:** "INV Discharge (PV Priority)".
    * **Regelung:** **Schwellwert-Steuerung** mit **Lade-Priorit√§t**. Es wird **kein P-Regler** angewendet. Der **Nullpunkt-Offset** (`nulleinspeisung_offset`, Standard: -30 W) verschiebt den Zielpunkt in den leichten **Netzbezug**. Die Ausgangsleistungsbegrenzung wird nur **aktiviert**, wenn die Netzeinspeisung den **verschobenen Toleranzbereich** √ºberschreitet, um die Batterie vorrangig zu laden.
    * **Remote Timeout:** Der Timer wird auch in dieser Zone bei Unterschreitung von 120s zur√ºckgesetzt.

    #### 3. Sicherheitsstopp (SOC <= Untere Schwelle)
    * **Bedingung:** SOC f√§llt unter die **Untere Schwelle** (`soc_conservation_limit`, Standard: 20%).
    * **Modus:** "Disabled".
    * **Aktion:** Die AC-Ausgangsleistung wird sofort auf **0 W** gesetzt und der Entladezyklus beendet.
  domain: automation
  author: AI-Assistent
  input:
    shelly_grid_power_sensor:
      name: Shelly/Netz-Leistungssensor (Shelly 3EM, etc.)
      description: Der Sensor, der die Netzleistung misst. (Muss 'power' device_class
        haben)
      selector:
        entity:
          filter:
            - domain:
              - sensor
              device_class:
              - power
          multiple: false
          reorder: false
    solakon_solar_power_sensor:
      name: Solakon ONE - Solarleistung (PV-Erzeugung)
      description: |
        Der Sensor, der die aktuelle Solarerzeugung in Watt anzeigt. **(Standard-Entit√§t: `sensor.solakon_one_pv_power`)**
      selector:
        entity:
          filter:
            - domain:
              - sensor
              device_class:
              - power
          multiple: false
          reorder: false
    solakon_soc_sensor:
      name: Solakon ONE - Batterieladestand (SOC)
      description: |
        Der SOC-Sensor des Solakon ONE (%). **(Standard-Entit√§t: `sensor.solakon_one_battery_soc`)**
      selector:
        entity:
          domain:
          - sensor
          multiple: false
          reorder: false
    solakon_power_limit_number:
      name: Solakon ONE - Ausgangsleistungsregler (AC-Output)
      description: |
        Die Entit√§t zur Steuerung der Lade-/Entladeleistung (Soll-Wert). **(Standard-Entit√§t: `number.solakon_one_remote_active_power`)**
      selector:
        entity:
          domain:
          - number
          multiple: false
          reorder: false
    solakon_mode_select:
      name: Solakon ONE - Betriebsmodus-Auswahl
      description: |
        Die Entit√§t zur Steuerung des Betriebsmodus. **(Standard-Entit√§t: `select.solakon_one_remote_mode`)**
      selector:
        entity:
          domain:
          - select
          multiple: false
          reorder: false
    solakon_mode_reset_timer_entity:
      name: Modus-Reset-Timer-Entit√§t (Solakon ONE - **Setter**)
      description: |
        Die Solakon ONE **Number** Entit√§t, die die Zeit (in Sekunden, max. 3600) steuert. Wird zum **Setzen/Zur√ºcksetzen** des Remote-Timeouts verwendet. **(Standard-Entit√§t: `number.solakon_one_remote_timeout_control`)**
      selector:
        entity:
          domain:
          - number
          multiple: false
          reorder: false
    solakon_timeout_countdown_sensor:
      name: Remote Timeout Countdown Sensor (Solakon ONE - **Ausleser**) üü¢
      description: |
        Der **Sensor** (z.B. in Sekunden), der den aktuell verbleibenden Countdown-Wert des Remote Timeouts anzeigt. **(Standard-Entit√§t: `sensor.solakon_one_remote_mode_countdown`)**
      selector:
        entity:
          filter:
            - domain:
              - sensor
              device_class:
              - power
          multiple: false
          reorder: false
    soc_entladezyklus_aktiv:
      name: Entladezyklus-Zustandsspeicher (Input Select/Dropdown)
      description: Input Select Helfer (MUSS Optionen 'on' und 'off' enthalten).
      selector:
        entity:
          domain:
          - input_select
          multiple: false
          reorder: false
    soc_fast_limit:
      name: SOC-Schwelle "Schnelle Regelung" (z.B. 50%)
      default: 50
      description: Der obere SOC-Wert (z.B. 50%). Wird dieser √ºberschritten, startet
        der aggressive Entladezyklus.
      selector:
        number:
          min: 21.0
          max: 100.0
          step: 1.0
          unit_of_measurement: '%'
          mode: slider
    soc_conservation_limit:
      name: SOC-Schwelle "Lade-Priorit√§t" (z.b. 20%)
      default: 20
      description: Der untere SOC-Wert (z.B. 20%). Wird dieser unterschritten, wird
        auf "Disabled" umgeschaltet.
      selector:
        number:
          min: 0.0
          max: 49.0
          step: 1.0
          unit_of_measurement: '%'
          mode: slider
    nulleinspeisung_toleranz:
      name: Toleranzbereich (Halbbreite)
      description: Der zul√§ssige Bereich in Watt um den Nullpunkt.
      default: 50
      selector:
        number:
          min: 10.0
          max: 200.0
          step: 10.0
          unit_of_measurement: W
          mode: slider
    anpassungs_faktor:
      name: Regelungs-Faktor (Korrektur-Geschw.)
      default: 1.5
      description: Definiert die Aggressivit√§t des P-Reglers.
      selector:
        number:
          min: 0.5
          max: 3.0
          step: 0.1
          mode: slider
    nulleinspeisung_offset:
      name: Nullpunkt-Offset (Neg. erzwingt Bezug)
      description: Negative Watt-Zahl, um den Nullpunkt unter SOC-Schwelle zu verschieben.
        (Wird nur in der konservativen Zone 2 genutzt)
      default: -30
      selector:
        number:
          min: -100.0
          max: 0.0
          step: 10.0
          unit_of_measurement: W
          mode: slider
  source_url: https://raw.githubusercontent.com/D4nte85/Solakon-One-Nulleispeisung-Blueprint-homeassistant/main/solakon_one_nulleinspeisung.yaml
mode: queued
max_exceeded: silent
variables:
  solakon_mode: !input solakon_mode_select
  solakon_soc_sensor: !input solakon_soc_sensor
  pv_power_sensor: !input solakon_solar_power_sensor
  grid_power_sensor: !input shelly_grid_power_sensor
  timer_entity: !input solakon_mode_reset_timer_entity
  countdown_sensor: !input solakon_timeout_countdown_sensor
  soc_start_limit: !input soc_fast_limit
  soc_stop_limit: !input soc_conservation_limit
  tolerance: !input nulleinspeisung_toleranz
  adj_factor: !input anpassungs_faktor
  offset_value: !input nulleinspeisung_offset
  cycle_active_helper: !input soc_entladezyklus_aktiv
trigger:
- platform: state
  entity_id: !input shelly_grid_power_sensor
  for:
    seconds: 3
- platform: numeric_state
  entity_id: !input solakon_soc_sensor
  above: !input soc_fast_limit
- platform: numeric_state
  entity_id: !input solakon_soc_sensor
  below: !input soc_conservation_limit
- platform: state
  entity_id: !input solakon_mode_select
condition: []
action:
- variables:
    cycle_active: '{{ is_state(cycle_active_helper, ''on'') }}'
    soc_value: '{{ states(solakon_soc_sensor) | float(-1) }}'
    grid_power: '{{ states(grid_power_sensor) | float(0) }}'
    pv_power: '{{ states(pv_power_sensor) | float(0) }}'
    current_mode: '{{ states(solakon_mode) }}'
    timeout_value: '{{ states(countdown_sensor) | int(0) }}'
- choose:
  # --- 1. Schnelle Regelung & Entladezyklus Start (SOC > Obere Schwelle) ---
  - conditions:
    - condition: template
      value_template: '{{ soc_value > soc_start_limit | float(50) and not cycle_active
        }}'
    sequence:
    - service: input_select.select_option
      target:
        entity_id: !input soc_entladezyklus_aktiv
      data:
        option: 'on'
    - condition: template
      value_template: '{{ current_mode != ''INV Discharge (PV Priority)'' }}'
    - service: select.select_option
      target:
        entity_id: !input solakon_mode_select
      data:
        option: INV Discharge (PV Priority)
    - service: number.set_value
      target:
        entity_id: !input solakon_mode_reset_timer_entity
      data:
        value: 3599
  # --- 2. Sicherheitsstopp Ende & Entladezyklus Stopp (SOC <= Untere Schwelle) ---
  - conditions:
    - condition: template
      value_template: '{{ soc_value <= soc_stop_limit | float(20) and cycle_active
        }}'
    sequence:
    - service: input_select.select_option
      target:
        entity_id: !input soc_entladezyklus_aktiv
      data:
        option: 'off'
    - condition: template
      value_template: '{{ current_mode != ''Disabled'' }}'
    - service: select.select_option
      target:
        entity_id: !input solakon_mode_select
      data:
        option: Disabled
    - service: number.set_value
      target:
        entity_id: !input solakon_power_limit_number
      data:
        value: 0
  # --- 3. Sicherheitsstopp (SOC < Untere Schwelle UND Zyklus Inaktiv) ---
  - conditions:
    - condition: template
      value_template: '{{ soc_value < soc_stop_limit | float(20) and not cycle_active and current_mode != ''Disabled'' }}'
    sequence:
    - service: select.select_option
      target:
        entity_id: !input solakon_mode_select
      data:
        option: Disabled
    - service: number.set_value
      target:
        entity_id: !input solakon_power_limit_number
      data:
        value: 0
  # --- 4. Batterieschonende Regelung (Zwischen-SOC UND Zyklus Inaktiv) ---
  - conditions:
    - condition: template
      value_template: '{{ soc_value > soc_stop_limit | float(20) and soc_value <= soc_start_limit | float(50) and not cycle_active and current_mode != ''INV Discharge (PV Priority)'' }}'
    sequence:
    - service: select.select_option
      target:
        entity_id: !input solakon_mode_select
      data:
        option: INV Discharge (PV Priority)
    - service: number.set_value
      target:
        entity_id: !input solakon_power_limit_number
      data:
        value: 0
  # --- 5. Aktive Regelung (Nur wenn Modus INV Discharge (PV Priority) aktiv ist) ---
  - conditions:
    - condition: template
      value_template: '{{ current_mode == "INV Discharge (PV Priority)" }}'
    sequence:
    - variables:
        tolerance_float: '{{ tolerance | float(50) }}'
        offset: '{{ offset_value | float(-30) if soc_value < soc_start_limit | float(50)
          else 0.0 }}'
        tolerance_low: '{{ offset - tolerance_float }}'
        tolerance_high: '{{ offset + tolerance_float }}'
    - choose:
      # --- 5a. Aggressive P-Regelung (Zyklus Aktiv oder SOC Hoch) ---
      - conditions:
        - condition: template
          value_template: '{{ cycle_active or soc_value > soc_start_limit | float(50)
            }}'
        sequence:
        - choose: # Timeout Reset
          - conditions:
            - condition: template
              value_template: '{{ timeout_value < 120 }}'
            sequence:
            - service: number.set_value
              target:
                entity_id: !input solakon_mode_reset_timer_entity
              data:
                value: 1
            - delay:
                milliseconds: 50
            - service: number.set_value
              target:
                entity_id: !input solakon_mode_reset_timer_entity
              data:
                value: 3599
          default: []
        - variables:
            current_limit: '{{ states(solakon_power_limit_number) | float(0) }}'
            new_limit: '{{ current_limit + grid_power * adj_factor }}'
        - condition: template
          value_template: "{{ grid_power > tolerance_high or\n  grid_power < tolerance_low
            }}"
        - service: number.set_value
          target:
            entity_id: !input solakon_power_limit_number
          data:
            value: '{{ [ new_limit, 0 ] | max | round(0) }}'
      # --- 5b. Passive/Schonende Regelung (Zwischen-SOC und Zyklus Inaktiv) ---
      - conditions:
        - condition: template
          value_template: "{{ not cycle_active and\n  soc_value >= soc_stop_limit
            | float(20) and\n  soc_value <= soc_start_limit | float(50) }}"
        sequence:
        - choose: # Timeout Reset
          - conditions:
            - condition: template
              value_template: '{{ timeout_value < 120 }}'
            sequence:
            - service: number.set_value
              target:
                entity_id: !input solakon_mode_reset_timer_entity
              data:
                value: 1
            - delay:
                milliseconds: 50
            - service: number.set_value
              target:
                entity_id: !input solakon_mode_reset_timer_entity
              data:
                value: 3599
          default: []
        - variables:
            limit_value: "{% if grid_power > offset + tolerance_float %}\n  {{ [ pv_power,
              grid_power ] | min }}\n{% else %}\n  0\n{% endif %}"
        - service: number.set_value
          target:
            entity_id: !input solakon_power_limit_number
          data:
            value: '{{ [ limit_value | round(0), 0 ] | max }}'
