blueprint:
  name: Solakon ONE Nulleinspeisung (DE) - Dynamisch & SOC-Gesteuert
  description: |
    **Detaillierte Funktionsbeschreibung: Dynamische Nulleinspeisung mit SOC-Zonenlogik (V194)**

    Dieser Home Assistant Blueprint implementiert eine **dynamische Nulleinspeisung** f√ºr den Solakon ONE Wechselrichter. Er nutzt einen Proportionalregler (P-Regler) zur Feinsteuerung der AC-Ausgangsleistung und eine **dreistufige State-of-Charge (SOC)-Logik** zur effizienten Verwaltung des Batteriespeichers.

    ---
    ### üß† P-Regler & Steuerlogik
    Der Kern des Blueprints ist ein **Proportionalregler (P-Regler)**, der das **AC-Output-Limit** (Entladeleistung) dynamisch anpasst.
    * **Messprinzip:** Die Regelung basiert auf dem **Shelly/Netzleistungssensor**. **WICHTIG:** Positive Werte = Bezug, NEGATIVE WERTE = Einspeisung.
    * **Korrektur-Aggressivit√§t:** Gesteuert √ºber den **Regelungs-Faktor**.
    * **Leistungsbegrenzung:** Gesichert durch ein **oberes Hard Limit** und ein **hartkodiertes unteres Limit von 0 W**.

    ---
    ### üîã Dreistufige SOC-Zonenlogik
    Die Logik unterteilt den Batterieladestand (SOC) in drei Zonen:

    #### 1. Zone: Aggressive Regelung (Entladezyklus / Hoher SOC)
    * **Bedingung:** SOC > **Oberer Schwellenwert** (`soc_fast_limit`) **ODER** Entladezyklus aktiv.
    * **Aktion:** **Max. Entladestrom** wird auf den Standardwert (z.B. 40 A) gesetzt.
    * **Regelung:** P-Regler mit **Nullpunkt-Offset von 0 W** zur exakten Nulleinspeisung.

    #### 2. Zone: Batterieschonende Regelung (Zwischen-SOC)
    * **Bedingung:** SOC zwischen Unterer (`soc_conservation_limit`) und Oberer Schwelle, UND Entladezyklus inaktiv.
    * **Aktion:** **Max. Entladestrom** wird auf **0 A** gesetzt (Entnahme nur √ºber AC-Limit).
    * **Regelung:** P-Regler mit **Negativen Nullpunkt-Offset** (z.B. -30 W) zur Verschiebung des Regelziels hin zu leichtem **Netzbezug** (Laden).
    * **Dynamische Obergrenze:** Entladeleistung wird durch **Max(0, PV - Reserve)** gedeckelt.

    #### 3. Zone: Sicherheits-Stopp (Niedriger SOC)
    * **Bedingung:** SOC f√§llt auf oder unter den **Unteren Schwellenwert**.
    * **Aktion:** Sofortiges Umschalten auf **"Disabled"** und Setzen des **AC-Output-Limits auf 0 W**.

    ---
    ### ‚öôÔ∏è Zus√§tzliche Steuermechanismen
    * **Zwei-Stufen-Moduswechsel:** Eine Puls-Sequenz (1s Puls, dann 3599s) wird verwendet, um die Modus-Kommandos zu sichern.
    * **Timeout-Refresh:** Der Remote Timeout wird automatisch auf 3599s zur√ºckgesetzt, wenn der Countdown unter 120s f√§llt.
      
  domain: automation
  source_url: https://github.com/D4nte85/Solakon-One-Nulleinspeisung-Blueprint-homeassistant/blob/experimental_battery_discharge_limit/solakon_one_nulleinspeisung.yaml
  input:
    # -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    # üîå EINSTELLUNGEN: Entit√§ten (Sortiert nach Leistung, Entlade-Limit, Modus/Select, Timer)
    # -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    
    # POWER SENSOREN
    grid_power_sensor:
      name: Shelly/Netz-Leistungssensor ‚ö°
      description: |
        Sensor f√ºr die aktuelle Netzleistung (z.B. Shelly 3EM).
        POSITIVE WERTE = Bezug, NEGATIVE WERTE = Einspeisung.
      selector:
        entity:
          domain: sensor
          device_class: power
    
    solar_power_sensor:
      name: Solakon ONE - Solarleistung (PV-Erzeugung) ‚òÄÔ∏è
      description: Die aktuelle PV-Gesamterzeugung in Watt.
      default: sensor.solakon_one_total_pv_power
      selector:
        entity:
          domain: sensor
          device_class: power
    
    active_power_number:
      name: Solakon ONE - Ausgangsleistungsregler ‚öôÔ∏è
      description: Die Entit√§t zum Setzen des Leistungs-Sollwerts (Remote Active Power).
      default: number.solakon_one_remote_active_power
      selector:
        entity:
          domain: number
    
    # ENTLADE LIMIT
    max_discharge_current_number:
      name: Solakon ONE - Max. Entladestrom (A) üîã
      description: Die Entit√§t zur Steuerung des maximalen Entladestroms (A).
      default: number.solakon_one_battery_max_discharge_current
      selector:
        entity:
          domain: number
    
    # MODUS/SELECT
    mode_select:
      name: Solakon ONE - Betriebsmodus-Auswahl üîÑ
      description: Die Entit√§t zum Umschalten des Betriebsmodus (Remote Control Mode).
      default: select.solakon_one_remote_control_mode
      selector:
        entity:
          domain: select
          
    # TIME SENSOREN
    remote_timeout_set_number:
      name: Modus-Reset-Timer-Entit√§t (Setter) ‚è≤Ô∏è
      description: Dient zum Setzen/Zur√ºcksetzen des Remote-Timeouts (max. 3599 s).
      default: number.solakon_one_remote_timeout_set
      selector:
        entity:
          domain: number
    
    remote_timeout_countdown_sensor:
      name: Remote Timeout Countdown Sensor (Ausleser) ‚è±Ô∏è
      description: Sensor, der den verbleibenden Timeout-Countdown anzeigt.
      default: sensor.solakon_one_remote_timeout_countdown
      selector:
        entity:
          domain: sensor
    
    # -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    # üìä EINSTELLUNGEN: SOC & ZUSTAND
    # -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    
    soc_sensor:
      name: Solakon ONE - Batterieladestand (SOC) üìä
      description: Der aktuelle Batterieladestand in %.
      default: sensor.solakon_one_battery_soc
      selector:
        entity:
          domain: sensor
          device_class: battery
          
    cycle_active_input_select:
      name: Entladezyklus-Zustandsspeicher (Helfer Auswahl) üíæ
      description: |
        WICHTIG: Erstellen Sie einen Input Select Helfer mit den Optionen 'on' und 'off'.
        Dieser speichert, ob der Entladezyklus aktiv ist (Zone 1).
      default: input_select.soc_entladezyklus_status
      selector:
        entity:
          domain: input_select
    
    # -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    # üéöÔ∏è EINSTELLUNGEN: Grenzwerte und Faktoren
    # -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    
    soc_fast_limit:
      name: SOC-Schwelle "Schnelle Regelung" (Zone 1 Start)
      description: Obere Schwelle. √úberschreiten startet den aggressiven Entladezyklus (z.B. 50 %).
      default: 50
      selector:
        number:
          min: 1
          max: 99
          unit_of_measurement: "%"
    
    soc_conservation_limit:
      name: SOC-Schwelle "Lade-Priorit√§t" (Zone 2 Start/Zone 3 Stopp)
      description: Untere Schwelle. Unterschreiten stoppt die Entladung (Zone 3). (z.B. 20 %).
      default: 20
      selector:
        number:
          min: 1
          max: 99
          unit_of_measurement: "%"
          
    tolerance:
      name: Toleranzbereich (Halbbreite)
      description: Der zul√§ssige Bereich in Watt um den Nullpunkt, bevor eine Korrektur vorgenommen wird (z.B. 25 W).
      default: 25
      selector:
        number:
          min: 0
          max: 200
          unit_of_measurement: W
          
    regulator_factor:
      name: Regelungs-Faktor (Aggressivit√§t des P-Reglers)
      description: Definiert die Aggressivit√§t, mit der die Ausgangsleistung angepasst wird (z.B. 1.5).
      default: 1.5
      selector:
        number:
          min: 0.1
          max: 5
          step: 0.1
          
    offset:
      name: Nullpunkt-Offset (Zielwert in Zone 2)
      description: Der Zielwert f√ºr die Netzleistung in Zone 2. Negativer Wert erzwingt leichten Netzbezug (z.B. -30 W).
      default: -30
      selector:
        number:
          min: -200
          max: 0
          unit_of_measurement: W
    
    default_discharge_current:
      name: Max. Entladestrom (Standardwert in Zone 1)
      description: Der maximale Entladestrom (A), der in der aggressiven Zone 1 gesetzt wird (z.B. 40 A).
      default: 40
      selector:
        number:
          min: 0
          max: 50
          unit_of_measurement: A
    
    pv_charge_reserve:
      name: üîã PV-Ladereserve (Watt)
      description: Die PV-Leistung, die in Zone 2 reserviert wird, um die Ladung zu gew√§hrleisten. Dient zur dynamischen Begrenzung der Ausgangsleistung (z.B. 50 W).
      default: 50
      selector:
        number:
          min: 0
          max: 1000
          unit_of_measurement: W
          
    max_active_power_limit:
      name: Maximale Ausgangsleistung (Hard Limit)
      description: Die maximale AC-Ausgangsleistung, die das Blueprint setzen darf (z.B. 800 W).
      default: 800
      selector:
        number:
          min: 0
          max: 1000
          unit_of_measurement: W
    
mode: queued
max_exceeded: silent
variables:
  # Zonen-Schwellwerte
  soc_fast_limit_int: !input soc_fast_limit
  soc_conservation_limit_int: !input soc_conservation_limit
  
  # Aktuelle Sensorwerte
  grid_power: !input grid_power_sensor
  soc: !input soc_sensor
  solar_power: !input solar_power_sensor
  timeout_countdown: !input remote_timeout_countdown_sensor
  
  # Konfiguration
  tolerance_int: !input tolerance
  regulator_factor_float: !input regulator_factor
  offset_int: !input offset
  max_active_power_limit_int: !input max_active_power_limit
  pv_charge_reserve_int: !input pv_charge_reserve
  
  # Zust√§nde
  cycle_active: !input cycle_active_input_select
  solakon_mode: !input mode_select
  
  # Parameter
  discharge_current_max: !input default_discharge_current
  
  # Entit√§ten
  active_power_entity: !input active_power_number
  discharge_current_entity: !input max_discharge_current_number
  timeout_set_entity: !input remote_timeout_set_number


trigger:
  # -------------------------------------------------------------------------------------------------
  # 1. Leistungs√§nderungen (Verz√∂gerte Trigger f√ºr stabile P-Regelung)
  # -------------------------------------------------------------------------------------------------
  - platform: state
    entity_id: !input grid_power_sensor
    for:
      seconds: 3
  - platform: state
    entity_id: !input solar_power_sensor
    for:
      seconds: 3

  # -------------------------------------------------------------------------------------------------
  # 2. SOC-Schwellwert-Erreichung (Steuert Zonen-Wechsel)
  # -------------------------------------------------------------------------------------------------
  - platform: numeric_state
    entity_id: !input soc_sensor
    above: !input soc_fast_limit

  - platform: numeric_state
    entity_id: !input soc_sensor
    below: !input soc_conservation_limit

  # -------------------------------------------------------------------------------------------------
  # 3. Modus-Wechsel (Reagiert auf manuelle/externe √Ñnderung)
  # -------------------------------------------------------------------------------------------------
  - platform: state
    entity_id: !input mode_select

action:
  # -------------------------------------------------------------------------------------------------
  # VALIDIERUNG: Check auf kritische Fehler (Werte und Entit√§ten)
  # -------------------------------------------------------------------------------------------------
  - choose:
    # PR√úFUNG A: SOC-Limits
    - conditions:
        - condition: template
          value_template: "{{ soc_fast_limit_int <= soc_conservation_limit_int }}"
      sequence:
        - service: system_log.write
          data:
            level: error
            message: "Solakon ONE Blueprint Fehler Die obere SOC-Schwelle ({{ soc_fast_limit_int }}%) muss gr√∂√üer sein als die untere SOC-Schwelle ({{ soc_conservation_limit_int }}%). Automatisierung gestoppt."
        - stop: Die SOC-Limits sind falsch gesetzt.
          
    # PR√úFUNG B: Kritische Entit√§ten verf√ºgbar
    - conditions:
        - condition: or
          conditions:
            # SOC und Timeout-Countdown: Pr√ºfe direkt auf 'unknown'/'unavailable' (statt auf 'is not number')
            - condition: template
              value_template: >
                {{ is_state(soc, 'unknown') or is_state(soc, 'unavailable') or
                   is_state(timeout_countdown, 'unknown') or is_state(timeout_countdown, 'unavailable') }}
            # Grid Power: Beibehaltene Pr√ºfung
            - condition: template
              value_template: "{{ states(grid_power) | is_number is false or states(grid_power) == 'unknown' or states(grid_power) == 'unavailable' }}"
            # Modus-Selektor: Beibehaltene Pr√ºfung
            - condition: template
              value_template: "{{ is_state(solakon_mode, 'unknown') or is_state(solakon_mode, 'unavailable') }}"
            # Active Power Number: Beibehaltene Pr√ºfung (Attribut Verf√ºgbarkeit)
            - condition: template
              value_template: "{{ state_attr(active_power_entity, 'min') is none }}"
      sequence:
        - service: system_log.write
          data:
            level: error
            message: "Solakon ONE Blueprint Fehler Eine oder mehrere kritische Entit√§ten (SOC, Timeout-Sensor, Netzleistung, Ausgangsleistungsregler) sind UNVERF√úGBAR oder haben ung√ºltige Werte. Automatisierung gestoppt."
        - stop: Kritische Entit√§ten sind fehlerhaft.
          
    default:
      # -------------------------------------------------------------------------------------------------
      # HAUPT-LOGIK: Modus- und Zyklus-Steuerung (Zone 1, 2, 3)
      # -------------------------------------------------------------------------------------------------
      - choose:
          # FALL A: ZONE 1 - Aggressive Entladung START (SOC > Obere Schwelle UND Zyklus OFF)
          - conditions:
              - condition: template
                value_template: "{{ states(soc) | float(0) > soc_fast_limit_int }}"
              - condition: state
                entity_id: !input cycle_active_input_select
                state: 'off'
            sequence:
              # 1. Zyklus auf 'on' setzen
              - service: input_select.select_option
                data:
                  entity_id: !input cycle_active_input_select
                  option: 'on'
              # 2. Modus-Wechsel zu 'INV Discharge PV Priority' (mit Puls-Sequenz zur Sicherheit)
              - choose:
                  - conditions: "{{ states(solakon_mode) != 'INV Discharge (PV Priority)' }}"
                    sequence:
                      - service: number.set_value
                        data:
                          entity_id: !input remote_timeout_set_number
                          value: 1
                      - delay: '00:00:01' 
                      - service: number.set_value
                        data:
                          entity_id: !input remote_timeout_set_number
                          value: 3599
                      - service: select.select_option
                        data:
                          entity_id: !input mode_select
                          option: 'INV Discharge (PV Priority)'

          # FALL B: ZONE 3 - Sicherheits-STOPP (SOC <= Untere Schwelle UND Zyklus ON)
          - conditions:
              - condition: template
                value_template: "{{ states(soc) | float(0) <= soc_conservation_limit_int }}"
              - condition: state
                entity_id: !input cycle_active_input_select
                state: 'on'
            sequence:
              # 1. Zyklus auf 'off' setzen
              - service: input_select.select_option
                data:
                  entity_id: !input cycle_active_input_select
                  option: 'off'
              # 2. Modus-Wechsel zu 'Disabled' (mit Puls-Sequenz zur Sicherheit)
              - choose:
                  - conditions: "{{ states(solakon_mode) != 'Disabled' }}"
                    sequence:
                      - service: number.set_value
                        data:
                          entity_id: !input remote_timeout_set_number
                          value: 1
                      - delay: '00:00:01'
                      - service: number.set_value
                        data:
                          entity_id: !input remote_timeout_set_number
                          value: 3599
                      - service: select.select_option
                        data:
                          entity_id: !input mode_select
                          option: 'Disabled'
              # 3. Power Limit auf 0 W setzen (Soft Stopp)
              - service: number.set_value
                data:
                  entity_id: !input active_power_number
                  value: 0
                  
          # FALL C: ZONE 3 - Sicherheits-STOPP (Zus√§tzliche Absicherung, falls Zyklus bereits OFF aber Modus aktiv)
          - conditions:
              - condition: template
                value_template: "{{ states(soc) | float(0) < soc_conservation_limit_int }}"
              - condition: state
                entity_id: !input cycle_active_input_select
                state: 'off'
              - condition: template
                value_template: "{{ states(solakon_mode) != 'INV Discharge (PV Priority)' }}"
            sequence:
              # Modus auf 'Disabled' setzen
              - choose:
                  - conditions: "{{ states(solakon_mode) != 'Disabled' }}"
                    sequence:
                      - service: number.set_value
                        data:
                          entity_id: !input remote_timeout_set_number
                          value: 1
                      - delay: '00:00:01'
                      - service: number.set_value
                        data:
                          entity_id: !input remote_timeout_set_number
                          value: 3599
                      - service: select.select_option
                        data:
                          entity_id: !input mode_select
                          option: 'Disabled'
              # Power Limit auf 0 W setzen
              - service: number.set_value
                data:
                  entity_id: !input active_power_number
                  value: 0
                  
          # FALL D: ZONE 2 - Batterieschonend START (P-Regler aktiv, aber 0 A Entladung)
          - conditions:
              - condition: template
                value_template: "{{ states(soc) | float(0) > soc_conservation_limit_int and states(soc) | float(0) <= soc_fast_limit_int }}"
              - condition: state
                entity_id: !input cycle_active_input_select
                state: 'off'
              - condition: template
                value_template: "{{ states(solakon_mode) != 'INV Discharge (PV Priority)' }}"
            sequence:
              # Modus-Wechsel zu 'INV Discharge PV Priority'
              - choose:
                  - conditions: "{{ states(solakon_mode) != 'INV Discharge (PV Priority)' }}"
                    sequence:
                      - service: number.set_value
                        data:
                          entity_id: !input remote_timeout_set_number
                          value: 1
                      - delay: '00:00:01'
                      - service: number.set_value
                        data:
                          entity_id: !input remote_timeout_set_number
                          value: 3599
                      - service: select.select_option
                        data:
                          entity_id: !input mode_select
                          option: 'INV Discharge (PV Priority)'
                          
  # -------------------------------------------------------------------------------------------------
  # AKTION E: P-Regler Logik, Timeout-Refresh UND Entlade-Limit-Absicherung (Als separate, bedingte Aktion)
  # -------------------------------------------------------------------------------------------------
  - condition: template
    value_template: "{{ states(solakon_mode) == 'INV Discharge (PV Priority)' }}"
    
  # NEU: Zuerst das Entlade-Limit absichern!
  - choose:
      # FALL E.1: Limit f√ºr Zone 1 setzen (Aggressiv)
      - conditions:
          - condition: state
            entity_id: !input cycle_active_input_select
            state: 'on'
          - condition: template
            value_template: >
              {# Pr√ºfe, ob der aktuelle Wert NICHT dem Maximalwert entspricht #}
              {{ states(discharge_current_entity) | float(999) | round(2) != discharge_current_max | float(0) | round(2) }}
        sequence:
          - service: number.set_value
            data:
              entity_id: !input max_discharge_current_number
              value: "{{ discharge_current_max }}"
              
      # FALL E.2: Limit f√ºr Zone 2 setzen (Batterieschonend = 0 A)
      - conditions:
          - condition: state
            entity_id: !input cycle_active_input_select
            state: 'off'
          - condition: template
            value_template: >
              {# Pr√ºfe, ob der aktuelle Wert NICHT 0 A entspricht #}
              {{ states(discharge_current_entity) | float(999) | round(2) != 0 }}
        sequence:
          - service: number.set_value
            data:
              entity_id: !input max_discharge_current_number
              value: 0

  - variables:
      # P-Regler-Variablen
      grid_power_float: "{{ states(grid_power) | float(0) }}"
      current_active_power: "{{ states(active_power_entity) | float(0) }}"
      # Target Offset basiert auf Zone (0 W in Zone 1, Offset_Int in Zone 2)
      target_offset: >
        {% if is_state(cycle_active, 'on') %}
          0
        {% else %}
          {{ offset_int }}
        {% endif %}
      # P-Regler Berechnung (Korrektur)
      power_correction: "{{ (grid_power_float - target_offset) * regulator_factor_float }}"
      # Neuer Power-Sollwert (unbegrenzt)
      new_power_unlimited: "{{ current_active_power + power_correction }}"
      # Max Power Limit in Zone 2 = Max(0, PV - Reserve)
      max_zone_2_limit: >
        {% set pv_minus_reserve = states(solar_power) | float(0) - pv_charge_reserve_int %}
        {{ [0, pv_minus_reserve] | max }}
        
      # Finale Power: Logik in einem Template zusammengefasst
      final_power_calculated: >
        {% set p_regler_power = new_power_unlimited %}
        {% if is_state(cycle_active, 'on') %}
          {# ZONE 1: Hard Limit #}
          {{ [max_active_power_limit_int, p_regler_power] | min }}
        {% else %}
          {# ZONE 2: Dynamisches PV-Limit #}
          {{ [max_zone_2_limit, p_regler_power] | min }}
        {% endif %}

  # 2. Kombinierte Aktion: Timeout-Reset ODER Power Limit setzen (Toleranzpr√ºfung)
  - choose: 
      # Fall A: Timeout-Reset erforderlich
      - conditions:
          - condition: template
            value_template: "{{ states(timeout_countdown) | int(9999) < 120 }}"
        sequence:
          - service: number.set_value
            data:
              entity_id: !input remote_timeout_set_number
              value: 3599
          - delay: '00:00:00.05' 
              
      # Fall B: Power Limit setzen (Nur wenn Toleranz √ºberschritten ist)
      - conditions:
          - condition: template
            value_template: "{{ (grid_power_float - target_offset) | abs > tolerance_int }}"
        sequence:
          - service: number.set_value
            data:
              entity_id: !input active_power_number
              value: "{{ [0, final_power_calculated] | max | round(0) }}" # Min 0 W
