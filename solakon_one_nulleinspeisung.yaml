blueprint:
  name: Solakon ONE Nulleinspeisung⚡ (V67 - Finaler Stabiler Code)
  description: |
    **Detaillierte Funktionsbeschreibung: Dynamische Nulleinspeisung mit SOC-Zonen-Logik**
    
    Dieser Blueprint regelt die AC-Ausgangsleistungsbegrenzung (AC-Output-Limit) des Solakon ONE Wechselrichters.
    
    **Trigger-Logik:** Die Automatisierung wird durch reaktive Trigger ausgelöst (Netzleistung mit 3s Stabilität, SOC-Schwellen und Moduswechsel).
    
    **Messprinzip (P-Regelung):**
    Die Steuerung arbeitet als Proportional-Regler (P-Regler) auf Basis der Entität Shelly/Netz-Leistungssensor.
    
    **Dreistufige SOC-Zonen-Logik:**
    
    ### 1. Schnelle Regelung & Entladezyklus (SOC > Obere Schwelle ODER Zyklus Aktiv)
    * **Modus:** "INV Discharge (PV Priority)".
    * **Regelung:** Aggressive P-Regelung mit **Nullpunkt-Offset von 0 W**. Steuert Entladung und exakte Nulleinspeisung.
    
    ### 2. Batterieschonende Regelung (Untere Schwelle < SOC < Obere Schwelle UND Zyklus Inaktiv)
    * **Modus:** "INV Discharge (PV Priority)".
    * **Ziel:** **Aktive Entladung der Batterie verhindern**, Nulleinspeisung über Offset beibehalten und **PV-Überschuss in die Batterie leiten**. 
    * **Regelung:** Passive Regelung mit **Offset** (`nulleinspeisung_offset`, z.B. -30 W). Die Logik nutzt die Begrenzung auf **`min(PV-Leistung, Netzüberschuss)`**, um die Entladung der Batterie zu stoppen, solange die Nulleinspeisung nicht überschritten wird.
    
    ### 3. Sicherheitsstopp (SOC < Untere Schwelle)
    * **Modus:** "Disabled".
    * **Ziel:** Sofortiges Stoppen der Entladung und Setzen des AC-Limits auf 0 W.
    
    **Technische Hinweise:**
    * Die Stabilität der Automatisierung wird durch die verzögerte Definition der Template-Variablen im `action`-Block gewährleistet.
  domain: automation
  author: AI-Assistent

  input:
    # --- (Inputs bleiben gleich) ---
    shelly_grid_power_sensor:
      name: Shelly/Netz-Leistungssensor (Shelly 3EM, etc.)
      description: Der Sensor, der die Netzleistung misst. (Muss 'power' device_class haben)
      selector:
        entity:
          filter:
            - domain: sensor
              device_class: power
    solakon_solar_power_sensor:
      name: Solakon ONE - Solarleistung (PV-Erzeugung)
      description: Der Sensor, der die aktuelle Solarerzeugung in Watt anzeigt. (Muss 'power' device_class haben)
      selector:
        entity:
          filter:
            - domain: sensor
              device_class: power

    solakon_soc_sensor:
      name: Solakon ONE - Batterieladestand (SOC)
      description: Der SOC-Sensor des Solakon ONE (%).
      selector:
        entity:
          domain: sensor
    
    solakon_power_limit_number:
      name: Solakon ONE - Ausgangsleistungsregler (AC-Output)
      description: Die Entität zur Steuerung der Lade-/Entladeleistung.
      selector:
        entity:
          domain: number
    solakon_mode_select:
      name: Solakon ONE - Betriebsmodus-Auswahl
      description: Die Entität zur Steuerung des Betriebsmodus.
      selector:
        entity:
          domain: select

    solakon_mode_reset_timer_entity:
      name: Modus-Reset-Timer-Entität (Solakon ONE)
      description: Die Solakon ONE Number Entität, die die Zeit (in Sekunden, max. 3600) steuert.
      selector:
        entity:
          domain: number
    
    soc_entladezyklus_aktiv:
      name: Entladezyklus-Zustandsspeicher (Input Select/Dropdown)
      description: Input Select Helfer (MUSS Optionen 'on' und 'off' enthalten).
      selector:
        entity:
          domain: input_select
          
    soc_fast_limit:
      name: SOC-Schwelle "Schnelle Regelung" (z.B. 50%)
      default: 50
      description: Der obere SOC-Wert (z.B. 50%). Wird dieser überschritten, startet der aggressive Entladezyklus.
      selector:
        number:
          min: 21
          max: 100
          step: 1
          unit_of_measurement: "%"
          
    soc_conservation_limit:
      name: SOC-Schwelle "Lade-Priorität" (z.B. 20%)
      default: 20
      description: Der untere SOC-Wert (z.B. 20%). Wird dieser unterschritten, wird auf "Disabled" umgeschaltet.
      selector:
        number:
          min: 0
          max: 49
          step: 1
          unit_of_measurement: "%"
          
    nulleinspeisung_toleranz:
      name: Toleranzbereich (Halbbreite)
      description: Der zulässige Bereich in Watt um den Nullpunkt.
      default: 50
      selector:
        number:
          min: 10
          max: 200
          step: 10
          unit_of_measurement: "W"
          
    anpassungs_faktor:
      name: Regelungs-Faktor (Korrektur-Geschw.)
      default: 1.5
      description: Definiert die Aggressivität des P-Reglers.
      selector:
        number:
          min: 0.5
          max: 3.0
          step: 0.1
          
    nulleinspeisung_offset:
      name: Nullpunkt-Offset (Neg. erzwingt Bezug)
      description: Negative Watt-Zahl, um den Nullpunkt unter SOC-Schwelle zu verschieben.
      default: -30
      selector:
        number:
          min: -100
          max: 0
          step: 10
          unit_of_measurement: "W"


mode: queued
max_exceeded: silent

variables:
  # Nur Inputs speichern
  solakon_mode: !input solakon_mode_select
  solakon_soc_sensor: !input solakon_soc_sensor
  pv_power_sensor: !input solakon_solar_power_sensor
  grid_power_sensor: !input shelly_grid_power_sensor
  timer_entity: !input solakon_mode_reset_timer_entity
  soc_start_limit: !input soc_fast_limit
  soc_stop_limit: !input soc_conservation_limit
  tolerance: !input nulleinspeisung_toleranz
  adj_factor: !input anpassungs_faktor
  offset_value: !input nulleinspeisung_offset
  cycle_active_helper: !input soc_entladezyklus_aktiv


trigger:
  - platform: state
    entity_id: !input shelly_grid_power_sensor
    for:
      seconds: 3
  - platform: numeric_state
    entity_id: !input solakon_soc_sensor
    above: !input soc_fast_limit
  - platform: numeric_state
    entity_id: !input solakon_soc_sensor
    below: !input soc_conservation_limit
  - platform: state
    entity_id: !input solakon_mode_select

condition: []

action:
  - variables:
      cycle_active: "{{ is_state(cycle_active_helper, 'on') }}"
      soc_value: "{{ states(solakon_soc_sensor) | float(-1) }}"
      grid_power: "{{ states(grid_power_sensor) | float(0) }}"
      pv_power: "{{ states(pv_power_sensor) | float(0) }}"

  - choose:
    # 1. START Entladezyklus
    - conditions:
        - condition: template
          value_template: "{{ soc_value > soc_start_limit | float(50) and not cycle_active }}"
      sequence:
        - service: input_select.select_option
          target:
            entity_id: !input soc_entladezyklus_aktiv
          data:
            option: "on"
        - service: select.select_option
          target:
            entity_id: !input solakon_mode_select
          data:
            option: "INV Discharge (PV Priority)"
        - service: number.set_value
          target:
            entity_id: !input solakon_mode_reset_timer_entity
          data:
            value: 3599

    # 2. ENDE Entladezyklus
    - conditions:
        - condition: template
          value_template: "{{ soc_value <= soc_stop_limit | float(20) and cycle_active }}"
      sequence:
        - service: input_select.select_option
          target:
            entity_id: !input soc_entladezyklus_aktiv
          data:
            option: "off"
        - service: select.select_option
          target:
            entity_id: !input solakon_mode_select
          data:
            option: "Disabled"
        - service: number.set_value
          target:
            entity_id: !input solakon_power_limit_number
          data:
            value: 0

    # 3. SICHERHEIT: Deaktivierung
    - conditions:
        - condition: template
          value_template: >-
            {{ soc_value < soc_stop_limit | float(20) and not cycle_active and
              states(solakon_mode) != 'Disabled' }}
      sequence:
        - service: select.select_option
          target:
            entity_id: !input solakon_mode_select
          data:
            option: "Disabled"
        - service: number.set_value
          target:
            entity_id: !input solakon_power_limit_number
          data:
            value: 0

    # 4. NULLEINSPEISUNGSREGELUNG
    - conditions:
        - condition: state
          entity_id: !input solakon_mode_select
          state: "INV Discharge (PV Priority)"
      sequence:
        # LOKALE BERECHNUNG DER TOLERANZEN
        - variables:
            tolerance_float: "{{ tolerance | float(50) }}"
            offset: "{{ offset_value | float(-30) if soc_value < soc_start_limit | float(50) else 0.0 }}"
            tolerance_low: "{{ offset - tolerance_float }}"
            tolerance_high: "{{ offset + tolerance_float }}"
            
        - choose:
          # A. Schnelle adaptive Regelung
            - conditions:
                - condition: template
                  value_template: "{{ cycle_active or soc_value > soc_start_limit | float(50) }}"
              sequence:
                - variables:
                    current_limit: "{{ states(solakon_power_limit_number) | float(0) }}"
                    new_limit: "{{ current_limit + grid_power * adj_factor }}"
                - condition: template
                  value_template: >-
                    {{ grid_power > tolerance_high or
                       grid_power < tolerance_low }}
                - service: number.set_value
                  target:
                    entity_id: !input solakon_power_limit_number
                  data:
                    value: "{{ [ new_limit, 0 ] | max | round(0) }}"

          # B. Batterieschonende Regelung (V67/V63 Code: Begrenzung auf min(PV, Netzüberschuss))
            - conditions:
                - condition: template
                  value_template: >-
                    {{ not cycle_active and
                        soc_value >= soc_stop_limit | float(20) and
                        soc_value <= soc_start_limit | float(50) }}
              sequence:
                - variables:
                    limit_value: >-
                      {% if grid_power > offset + tolerance_float %}
                        {{ [ pv_power, grid_power ] | min }}
                      {% else %}
                        0
                      {% endif %}
                - service: number.set_value
                  target:
                    entity_id: !input solakon_power_limit_number
                  data:
                    value: "{{ [ limit_value | round(0), 0 ] | max }}"