blueprint:
  name: Solakon ONE Zero Exportâš¡ (V149)
  description: |
    **Detailed Function Description: Dynamic Zero Export with SOC Zone Logic**

    This blueprint regulates the AC output power limit of the Solakon ONE inverter. The goal is **dynamic Zero Export** via a Proportional Controller (P-Controller) while efficiently managing the battery through a **three-stage State-of-Charge (SOC) logic**.

    ---
    ### ðŸ§  P-Controller & Control Logic
    * **Measurement Principle (P-Control):** The controller operates as a **Proportional Controller (P-Controller)** based on the **Shelly/Grid Power Sensor** entity. **IMPORTANT:** It assumes that **positive values mean grid consumption** and **negative values mean grid export**.
      * **Positive Grid Power (Consumption):** Increase AC Output Power.
      * **Negative Grid Power (Export):** Decrease AC Output Power.
    * **Correction Tendency:** The aggressiveness of the reaction is controlled via the **Adjustment Factor**.
    * **Power Limitation:** The regulated output power is secured by an **upper limit** (`max_active_power_limit`) and a **hardcoded lower limit of 0 W**.

    ---
    ### ðŸ”‹ Three-Stage SOC Zone Logic

    #### 1. Fast Regulation & Discharge Cycle (SOC > Upper Threshold OR Cycle Active)
    * **Condition:** The SOC is above the **Upper Threshold** (`soc_fast_limit`, Default: 50%) OR the discharge cycle is already active.
    * **Mode:** "INV Discharge (PV Priority)".
    * **Regulation:** **Aggressive P-Control** with a **Zero-Point Offset of 0 W**. Controls discharge and exact zero export.

    #### 2. Battery-Conserving Regulation (Mid-SOC and Cycle Inactive)
    * **Condition:** The SOC is between the **Lower Threshold** (20%) and the **Upper Threshold** (50%), and the discharge cycle is inactive.
    * **Mode:** Control of **"INV Discharge (PV Priority)"** and **"Disabled"** based on PV power.
      * **Start:** Switch to **"INV Discharge (PV Priority)"** only if **PV power strictly exceeds the PV Reserve**.
      * **Stop (Loop Protection):** Switch to **"Disabled"** and 0 W limit if PV power drops to or below the PV Reserve during operation.
    * **Regulation:** **Active P-Control** with a shifted zero point and charge priority. The **Zero-Point Offset** (`zero_export_offset`, Default: -30 W) shifts the control target to slight **grid consumption** (charging).
    * **PV Charge Priority (Dynamic Upper Limit):** The discharge power is dynamically limited by the **smaller value** of the P-Controller proposal and the **available PV power minus the PV Reserve**. This ensures the **PV Reserve** is always used for battery charging.

    #### 3. Safety Stop (SOC <= Lower Threshold)
    * **Condition:** SOC drops below the **Lower Threshold** (`soc_conservation_limit`, Default: 20%).
    * **Mode:** "Disabled".
    * **Action:** AC output power is immediately set to **0 W**, and the discharge cycle ends.
    
    ---
    ### ðŸ”„ Additional Control Mechanisms
    * **Optimized Timeout Reset on Mode Change:** Before a mode change, a **two-stage pulse sequence** (`1s` pulse, then set `3599s`) is performed to ensure acceptance of the critical mode command and prevent timeout errors.
    * **Timeout Reset (Continuous):** The Remote Control Timeout (max. 3600s) is **automatically reset to 3599s** in the active discharge zones (1 and 2) as soon as the countdown drops below 120s.
    * **Triggers:** The automation is triggered by changes in grid power and PV power (with 3s stability), crossing the SOC thresholds, mode changes, and the Remote Timeout Countdown Sensor (< 150s).
  domain: automation
  author: AI-Assistant
  input:
    shelly_grid_power_sensor:
      name: Shelly/Grid Power Sensor (Shelly 3EM, etc.)
      description: The sensor measuring grid power. (Must have 'power' device_class)
      selector:
        entity:
          filter:
            - domain:
                - sensor
              device_class:
                - power
          multiple: false
          reorder: false
    solakon_solar_power_sensor:
      name: Solakon ONE - Solar Power (PV Generation)
      description: |
        The sensor showing the current solar generation in Watts. **(Default Entity: `sensor.solakon_one_total_pv_power`)**
      default: sensor.solakon_one_total_pv_power
      selector:
        entity:
          filter:
            - domain:
                - sensor
              device_class:
                - power
          multiple: false
          reorder: false
    solakon_soc_sensor:
      name: Solakon ONE - Battery State-of-Charge (SOC)
      description: |
        The SOC sensor of the Solakon ONE (%). **(Default Entity: `sensor.solakon_one_battery_soc`)**
      default: sensor.solakon_one_battery_soc
      selector:
        entity:
          domain:
            - sensor
          multiple: false
          reorder: false
    solakon_power_limit_number:
      name: Solakon ONE - Output Power Regulator (AC-Output)
      description: |
        The entity for controlling the charge/discharge power (Set Point). **(Default Entity: `number.solakon_one_remote_active_power`)**
      default: number.solakon_one_remote_active_power
      selector:
        entity:
          domain:
            - number
          multiple: false
          reorder: false
    solakon_mode_select:
      name: Solakon ONE - Operating Mode Selection
      description: |
        The entity for controlling the operating mode. **(Default Entity: `select.solakon_one_remote_control_mode`)**
      default: select.solakon_one_remote_control_mode
      selector:
        entity:
          domain:
            - select
          multiple: false
          reorder: false
    solakon_mode_reset_timer_entity:
      name: Mode Reset Timer Entity (Solakon ONE - **Setter**)
      description: |
        The Solakon ONE **Number** entity that controls the time (in seconds, max. 3600). Used to **Set/Reset** the Remote Timeout. **(Default Entity: `number.solakon_one_remote_timeout_set`)**
      default: number.solakon_one_remote_timeout_set
      selector:
        entity:
          domain:
            - number
          multiple: false
          reorder: false
    solakon_timeout_countdown_sensor:
      name: Remote Timeout Countdown Sensor (Solakon ONE - **Reader**) ðŸŸ¢
      description: |
        The **Sensor** or **Number** entity displaying the currently remaining countdown value of the Remote Timeout in seconds.
      default: sensor.solakon_one_remote_timeout_countdown
      selector:
        entity:
          filter:
            - domain:
                - sensor
                - number
          multiple: false
          reorder: false
    soc_discharge_cycle_status:
      name: Discharge Cycle State Memory (Input Select/Dropdown)
      description: Input Select helper (MUST contain options 'on' and 'off').
      default: input_select.soc_discharge_cycle_status
      selector:
        entity:
          domain:
            - input_select
          multiple: false
          reorder: false
    soc_fast_limit:
      name: SOC Threshold "Fast Regulation" (e.g., 50%)
      default: 50
      description: The upper SOC value (e.g., 50%). Exceeding this starts the aggressive
        discharge cycle.
      selector:
        number:
          min: 21.0
          max: 100.0
          step: 1.0
          unit_of_measurement: '%'
          mode: slider
    soc_conservation_limit:
      name: SOC Threshold "Charge Priority" (e.g., 20%)
      default: 20
      description: The lower SOC value (e.g., 20%). Falling below this switches to
        "Disabled".
      selector:
        number:
          min: 0.0
          max: 49.0
          step: 1.0
          unit_of_measurement: '%'
          mode: slider
    zero_export_tolerance:
      name: Tolerance Range (Half-width)
      default: 25
      description: The permissible range in Watts around the zero or offset point.
      selector:
        number:
          min: 10.0
          max: 200.0
          step: 10.0
          unit_of_measurement: W
          mode: slider
    adjustment_factor:
      name: Regulation Factor (Correction Speed)
      default: 1.5
      description: Defines the aggressiveness of the P-Controller.
      selector:
        number:
          min: 0.5
          max: 3.0
          step: 0.1
          mode: slider
    zero_export_offset:
      name: Zero-Point Offset (Neg. forces consumption)
      default: -30
      description: Negative Wattage to shift the zero point below the SOC threshold.
        (Used only in the conservative Zone 2)
      selector:
        number:
          min: -100.0
          max: 0.0
          step: 10.0
          unit_of_measurement: W
          mode: slider
    pv_charge_reserve:
      name: ðŸ”‹ PV Charge Reserve (Mid-SOC)
      default: 50
      description: |
        The PV power to be reserved in Watts (W). This buffer compensates for
        internal inverter losses, guaranteeing battery charging. (Used only
        in the conservative Zone 2)
      selector:
        number:
          min: 0.0
          max: 500.0
          step: 10.0
          unit_of_measurement: W
          mode: slider
    max_active_power_limit:
      name: Maximum Output Power (Hard Limit)
      default: 800
      description: The absolute limit for AC output power in Watts, regardless
        of regulation. (Should correspond to the max value of your Solakon ONE)
      selector:
        number:
          min: 0.0
          max: 1200.0
          step: 10.0
          unit_of_measurement: W
          mode: slider
  source_url: https://github.com/D4nte85/Solakon-One-Nulleinspeisung-Blueprint-homeassistant/edit/main/solakon_one_zero_export.yaml
mode: queued
max_exceeded: silent
variables:
  # The variable declaration follows the only reliably working method for Blueprints
  # in Home Assistant; all other possibilities are flawed and throw errors.
  solakon_mode: !input solakon_mode_select
  solakon_soc_sensor: !input solakon_soc_sensor
  pv_power_sensor: !input solakon_solar_power_sensor
  grid_power_sensor: !input shelly_grid_power_sensor
  timer_entity: !input solakon_mode_reset_timer_entity
  countdown_sensor: !input solakon_timeout_countdown_sensor
  solakon_power_limit_number: !input solakon_power_limit_number
  soc_start_limit: !input soc_fast_limit
  soc_stop_limit: !input soc_conservation_limit
  tolerance: !input zero_export_tolerance
  adj_factor: !input adjustment_factor
  offset_value: !input zero_export_offset
  cycle_active_helper: !input soc_discharge_cycle_status
  pv_reserve: !input pv_charge_reserve
  max_limit: !input max_active_power_limit
trigger:
  - platform: state
    entity_id: !input shelly_grid_power_sensor
    for:
      seconds: 3
  - platform: state
    entity_id: !input solakon_solar_power_sensor
    for:
      seconds: 3
  - platform: numeric_state
    entity_id: !input solakon_soc_sensor
    above: !input soc_fast_limit
  - platform: numeric_state
    entity_id: !input solakon_soc_sensor
    below: !input soc_conservation_limit
  - platform: state
    entity_id: !input solakon_mode_select
  - platform: numeric_state
    entity_id: !input solakon_timeout_countdown_sensor
    below: 150
condition: []
action:
  - variables:
      # Preparatory variables for validation
      soc_value: '{{ states(solakon_soc_sensor) | float(-1) }}'
      timeout_value: '{{ states(countdown_sensor) | int(-1) }}'
      error_log_message: "Solakon ONE Blueprint Error:"

  # --- Input Validation ---
  - choose:
      # 1. Case: SOC thresholds are invalid/swapped
    - conditions:
      - condition: template
        value_template: >
          {{ soc_start_limit | float(0) <= soc_stop_limit | float(0) }}
      sequence:
      - service: system_log.write
        data:
          logger: automation.solakon_zero_export
          level: error
          message: >
            {{ error_log_message }} The upper SOC threshold ({{ soc_start_limit }}%) must
            be greater than the lower SOC threshold ({{ soc_stop_limit }}%).
            Please adjust the values. Automation stopped.
      - stop: Invalid thresholds
        
      # 2. Case: Critical entities are unavailable
    - conditions:
      - condition: template
        value_template: >
          {{ soc_value == -1 or timeout_value == -1 or
            is_state(grid_power_sensor, 'unavailable') or
            is_state(solakon_power_limit_number, 'unavailable') }}
      sequence:
      - service: system_log.write
        data:
          logger: automation.solakon_zero_export
          level: error
          message: >
            {{ error_log_message }} One or more critical entities are UNAVAILABLE
            or have invalid values. Automation stopped.
      - stop: Critical entity unavailable
        
    default: []

  # --- End of Validation Choose Block ---

  - variables:
      # Global variables for regulation logic
      cycle_active: '{{ is_state(cycle_active_helper, ''on'') }}'
      grid_power: '{{ states(grid_power_sensor) | float(0) }}'
      pv_power: '{{ states(pv_power_sensor) | float(0) }}'
      current_mode: '{{ states(solakon_mode) }}'
      pv_reserve_float: '{{ pv_reserve | float(50) }}'

  - choose:
      
      # --- 1. Fast Regulation & Discharge Cycle Start (SOC > Upper Threshold) ---
    - conditions:
      - condition: template
        value_template: >
          {{ soc_value > soc_start_limit | float(50) and 
             not cycle_active }}
      sequence:
      - service: input_select.select_option
        target:
          entity_id: !input soc_discharge_cycle_status
        data:
          option: 'on'
      - choose: # Conditional mode change with forced reset
        - conditions:
          - condition: template
            value_template: '{{ current_mode != "INV Discharge (PV Priority)" }}'
          sequence:
          - service: number.set_value # 1. Reset to 1s (Pulse for unlocking)
            target:
              entity_id: !input solakon_mode_reset_timer_entity
            data:
              value: 1
          - delay:
              milliseconds: 300
          - service: number.set_value # 2. Set timeout to 3599 (BEFORE mode change)
            target:
              entity_id: !input solakon_mode_reset_timer_entity
            data:
              value: 3599
          - delay:
              milliseconds: 300
          - service: select.select_option # 3. Mode change
            target:
              entity_id: !input solakon_mode_select
            data:
              option: INV Discharge (PV Priority)
        default: []
        
      # --- 2. Safety Stop End & Discharge Cycle Stop (SOC <= Lower Threshold) ---
    - conditions:
      - condition: template
        value_template: '{{ soc_value <= soc_stop_limit | float(20) and cycle_active
          }}'
      sequence:
      - service: input_select.select_option
        target:
          entity_id: !input soc_discharge_cycle_status
        data:
          option: 'off'
      - choose: # Conditional mode change with forced reset
        - conditions:
          - condition: template
            value_template: '{{ current_mode != ''Disabled'' }}'
          sequence:
          - service: number.set_value # 1. Reset to 1s (Pulse for unlocking)
            target:
              entity_id: !input solakon_mode_reset_timer_entity
            data:
              value: 1
          - delay:
              milliseconds: 300
          - service: number.set_value # 2. Set timeout to 3599 (BEFORE mode change)
            target:
              entity_id: !input solakon_mode_reset_timer_entity
            data:
              value: 3599
          - delay:
              milliseconds: 300
          - service: select.select_option # 3. Mode change
            target:
              entity_id: !input solakon_mode_select
            data:
              option: Disabled
        default: []
      - service: number.set_value
        target:
          entity_id: !input solakon_power_limit_number
        data:
          value: 0
          
      # --- 3. Safety Stop (SOC < Lower Threshold AND Cycle Inactive) ---
    - conditions:
      - condition: template
        value_template: '{{ soc_value < soc_stop_limit | float(20) and not cycle_active and current_mode != ''Disabled'' }}'
      sequence:
      - service: number.set_value # 1. Reset to 1s (Pulse for unlocking)
        target:
          entity_id: !input solakon_mode_reset_timer_entity
        data:
          value: 1
      - delay:
          milliseconds: 300
      - service: number.set_value # 2. Set timeout to 3599 (BEFORE mode change)
        target:
          entity_id: !input solakon_mode_reset_timer_entity
        data:
          value: 3599
      - delay:
          milliseconds: 300
      - service: select.select_option # 3. Mode change
        target:
          entity_id: !input solakon_mode_select
        data:
          option: Disabled
      - service: number.set_value
        target:
          entity_id: !input solakon_power_limit_number
        data:
          value: 0
          
      # --- 4. Battery-Conserving Regulation (Mid-SOC AND Cycle Inactive) - START/STOP Logic Bundling ---
    - conditions:
      - condition: template
        value_template: >
          {{ soc_value > soc_stop_limit | float(20) and 
             soc_value <= soc_start_limit | float(50) and 
             not cycle_active }}
      sequence:
      - choose:
          # --- 4a. START of Conservation Regulation (PV > Reserve AND Mode is not active) ---
        - conditions:
          - condition: template
            value_template: >
              {{ pv_power > pv_reserve_float and 
                 current_mode != "INV Discharge (PV Priority)" }}
          sequence:
          - service: number.set_value # 1. Reset to 1s (Pulse for unlocking)
            target:
              entity_id: !input solakon_mode_reset_timer_entity
            data:
              value: 1
          - delay:
              milliseconds: 300
          - service: number.set_value # 2. Set timeout to 3599 (BEFORE mode change)
            target:
              entity_id: !input solakon_mode_reset_timer_entity
            data:
              value: 3599
          - delay:
              milliseconds: 300
          - service: select.select_option # 3. Mode change
            target:
              entity_id: !input solakon_mode_select
            data:
              option: INV Discharge (PV Priority)
          - service: number.set_value
            target:
              entity_id: !input solakon_power_limit_number
            data:
              value: 0
              
          # --- 4b. STOP of Conservation Regulation (PV <= Reserve AND Mode is active) ---
        - conditions:
          - condition: template
            value_template: >
              {{ pv_power <= pv_reserve_float and 
                 current_mode == "INV Discharge (PV Priority)" }}
          sequence:
          - service: number.set_value # 1. Reset to 1s (Pulse for unlocking)
            target:
              entity_id: !input solakon_mode_reset_timer_entity
            data:
              value: 1
          - delay:
              milliseconds: 300
          - service: number.set_value # 2. Set timeout to 3599 (BEFORE mode change)
            target:
              entity_id: !input solakon_mode_reset_timer_entity
            data:
              value: 3599
          - delay:
              milliseconds: 300
          - service: select.select_option # 3. Mode change
            target:
              entity_id: !input solakon_mode_select
            data:
              option: Disabled
          - service: number.set_value
            target:
              entity_id: !input solakon_power_limit_number
            data:
              value: 0
        default: [] # No change if PV > Reserve AND Mode active OR PV <= Reserve AND Mode inactive.
          
      # --- 5. Active Regulation (Only when mode INV Discharge (PV Priority) is active) ---
    - conditions:
      - condition: template
        value_template: '{{ current_mode == "INV Discharge (PV Priority)" }}'
      sequence:
      
      # Timeout Reset (Prioritized Pulse Action)
      - variables:
          # Declare variables needed for the reset
          soc_zone_1_or_2: >
              {{
                cycle_active or
                (soc_value >= soc_stop_limit | float(20) and soc_value <= soc_start_limit | float(50))
              }}
      - choose: # Timeout Reset (Continuous Refresh)
        - conditions:
          - condition: template
            value_template: '{{ soc_zone_1_or_2 }}'
          - condition: template
            value_template: '{{ timeout_value < 120 and timeout_value != -1 }}'
          sequence:
          - service: number.set_value
            target:
              entity_id: !input solakon_mode_reset_timer_entity
            data:
              value: 1
          - delay:
              milliseconds: 300
          - service: number.set_value
            target:
              entity_id: !input solakon_mode_reset_timer_entity
            data:
              value: 3599
        default: []

      # P-Regulation Variables (for P-Regulation actions)
      - variables:
          tolerance_float: '{{ tolerance | float(25) }}'
          # Offset value: Negative in input becomes POSITIVE in offset (force consumption)
          offset: '{{ offset_value | float(-30) * -1 if soc_value < soc_start_limit | float(50) and not cycle_active else 0.0 }}'
          tolerance_high: '{{ offset + tolerance_float }}'
          tolerance_low: '{{ offset - tolerance_float }}'
          current_limit: '{{ states(solakon_power_limit_number) | float(0) }}'
          
      - choose:
        # --- 5a. Aggressive P-Regulation (Cycle Active or High SOC - Zone 1) ---
        - conditions:
          - condition: template
            value_template: '{{ cycle_active or soc_value > soc_start_limit | float(50) }}'
          sequence:
          - variables:
              # Deviation is grid_power - Offset (here 0)
              reg_abweichung: '{{ grid_power | float(0) - offset | float(0) }}'
              new_limit_calc: '{{ current_limit + reg_abweichung * adj_factor }}'
          - condition: template
            value_template: >
              {{ grid_power > tolerance_high or
                grid_power < tolerance_low }}
          - service: number.set_value
            target:
              entity_id: !input solakon_power_limit_number
            data:
              # Limit: Max of calculated value and 0, then min of global max limit
              value: '{{ [ min(new_limit_calc | float(0), max_limit | float(800)), 0 ] | max | round(0) }}'
            
        # --- 5b. Battery-Conserving P-Regulation (Mid-SOC and Cycle Inactive - Zone 2) ---
        - conditions:
          - condition: template
            value_template: >
              {{ not cycle_active and
                soc_value >= soc_stop_limit | float(20) and
                soc_value <= soc_start_limit | float(50) }}
          sequence:
          - variables:
              # Deviation is grid_power - Offset (here the NEW calculated positive offset value, e.g., +30)
              reg_abweichung: '{{ grid_power | float(0) - offset | float(30) }}'
              new_limit_calc: '{{ current_limit + reg_abweichung * adj_factor }}'
          
          # NEW: The P-Controller is only executed if it is outside the tolerance range (standard P-Controller function)
          - condition: template
            value_template: >
              {{ grid_power > tolerance_high or
                grid_power < tolerance_low }}

          - service: number.set_value
            target:
              entity_id: !input solakon_power_limit_number
            data:
              # The discharge limit in Zone 2 combines P-Regulation with the dynamic PV charge reserve.
              value: >
                {% set calculated_limit = new_limit_calc | float(0) %}
                
                {# Defines the upper limit: Minimum of Hard Limit and max(0, PV Power - PV Reserve). #}
                {% set dynamic_pv_limit = max(states(pv_power_sensor) | float(0) - pv_reserve | float(50), 0) %}
                {% set final_max_limit = min(max_limit | float(800), dynamic_pv_limit) %}
                
                {# Sends the minimum of the P-Controller value and the dynamic upper limit, minimum 0 W. #}
                {{ max(min(calculated_limit, final_max_limit), 0) | round(0) }}
