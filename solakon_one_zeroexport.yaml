blueprint:
  name: Solakon ONE Zero Exportâš¡ (V138)
  description: |
    **Detailed Function Description: Dynamic Zero Export with SOC Zone Logic**

    This blueprint regulates the AC Output Power Limit of the Solakon ONE inverter. The goal is **dynamic zero export** using a Proportional Controller (P-Controller) while efficiently managing the battery with a **three-stage State-of-Charge (SOC) logic**.

    ---
    ### ðŸ§  P-Controller & Control Logic
    * **Measurement Principle (P-Control):** The control operates as a **Proportional Controller (P-Controller)** based on the **Shelly/Grid Power Sensor** entity. **IMPORTANT:** It is assumed that **positive values mean Grid Import** and **negative values mean Grid Export**.
      * **Positive Grid Power (Import):** Increase AC output power.
      * **Negative Grid Power (Export):** Decrease AC output power.
    * **Correction Tendency:** The aggressiveness of the reaction is controlled by the **Adjustment Factor**.
    * **Triggers:** The automation is triggered by changes in grid power (with 3s stability), SOC thresholds, and mode changes. **(Added: Trigger on Remote Timeout Countdown Sensor)**
    * **Power Limit:** The regulated output power is now secured by an **upper limit** (`max_active_power_limit`) and a **hardcoded lower limit of 0 W**.

    ---
    ### ðŸ”‹ Three-Stage SOC Zone Logic

    #### 1. Fast Control & Discharge Cycle (SOC > Upper Threshold OR Cycle Active)
    * **Condition:** SOC is above the **Upper Threshold** (`soc_fast_limit`, Default: 50%) OR the discharge cycle is already active.
    * **Mode:** "INV Discharge (PV Priority)".
    * **Control:** **Aggressive P-Control** with a **Zero Point Offset of 0 W**. Controls discharge and exact zero export.
    * **Remote Timeout:** The timer is reset (to 3599s) if the value drops below 120s. **(Reset Impulse Delay increased to 300ms and logic prioritized.)**

    #### 2. Battery-Conserving Control (Intermediate SOC and Cycle Inactive)
    * **Condition:** SOC is between the **Lower Threshold** (20%) and the **Upper Threshold** (50%), and the discharge cycle is inactive.
    * **Mode:** "INV Discharge (PV Priority)".
    * **Control:** **Active P-Control** with a shifted zero point and charge priority. The **Zero Point Offset** (`zero_point_offset`, Default: -30 W) shifts the control target to slight **Grid Import** (set to e.g., +30W import via sign correction). The output power is actively regulated and only released up to the **PV Charge Reserve** limit.
    * **PV Charge Reserve:** The discharge power is additionally reduced by the **PV Charge Reserve** (`pv_charge_reserve`) to reserve a portion of the solar yield for battery charging.
    * **Remote Timeout:** The timer is also reset in this zone if the value drops below 120s. **(Reset Impulse Delay increased to 300ms and logic prioritized.)**

    #### 3. Safety Stop (SOC <= Lower Threshold)
    * **Condition:** SOC falls below the **Lower Threshold** (`soc_conservation_limit`, Default: 20%).
    * **Mode:** "Disabled".
    * **Action:** AC output power is immediately set to **0 W** and the discharge cycle is ended.
  domain: automation
  author: AI-Assistent
  input:
    shelly_grid_power_sensor:
      name: Shelly/Grid Power Sensor (Shelly 3EM, etc.)
      description: The sensor measuring grid power. (Must have 'power' device_class)
      selector:
        entity:
          filter:
            - domain:
                - sensor
              device_class:
                - power
          multiple: false
          reorder: false
    solakon_solar_power_sensor:
      name: Solakon ONE - Solar Power (PV Generation)
      description: |
        The sensor showing the current solar generation in Watts. **(Default entity: `sensor.solakon_one_total_pv_power`)**
      default: sensor.solakon_one_total_pv_power
      selector:
        entity:
          filter:
            - domain:
                - sensor
              device_class:
                - power
          multiple: false
          reorder: false
    solakon_soc_sensor:
      name: Solakon ONE - Battery State of Charge (SOC)
      description: |
        The SOC sensor of the Solakon ONE (%). **(Default entity: `sensor.solakon_one_battery_soc`)**
      default: sensor.solakon_one_battery_soc
      selector:
        entity:
          domain:
            - sensor
          multiple: false
          reorder: false
    solakon_power_limit_number:
      name: Solakon ONE - Output Power Regulator (AC-Output)
      description: |
        The entity for controlling the charge/discharge power (target value). **(Default entity: `number.solakon_one_remote_active_power`)**
      default: number.solakon_one_remote_active_power
      selector:
        entity:
          domain:
            - number
          multiple: false
          reorder: false
    solakon_mode_select:
      name: Solakon ONE - Operating Mode Selector
      description: |
        The entity for controlling the operating mode. **(Default entity: `select.solakon_one_remote_control_mode`)**
      default: select.solakon_one_remote_control_mode
      selector:
        entity:
          domain:
            - select
          multiple: false
          reorder: false
    solakon_mode_reset_timer_entity:
      name: Mode Reset Timer Entity (Solakon ONE - **Setter**)
      description: |
        The Solakon ONE **Number** entity that controls the time (in seconds, max. 3600). Used to **set/reset** the remote timeout. **(Default entity: `number.solakon_one_remote_timeout_set`)**
      default: number.solakon_one_remote_timeout_set
      selector:
        entity:
          domain:
            - number
          multiple: false
          reorder: false
    solakon_timeout_countdown_sensor:
      name: Remote Timeout Countdown Sensor (Solakon ONE - **Reader**) ðŸŸ¢
      description: |
        The **Sensor** or **Number** entity displaying the current remaining countdown value of the remote timeout in seconds.
      default: sensor.solakon_one_remote_timeout_countdown
      selector:
        entity:
          filter:
            - domain:
                - sensor
                - number
          multiple: false
          reorder: false
    soc_entladezyklus_aktiv:
      name: Discharge Cycle State Helper (Input Select/Dropdown)
      description: Input Select Helper (MUST contain options 'on' and 'off').
      default: input_select.solakon_discharge_cycle_active
      selector:
        entity:
          domain:
            - input_select
          multiple: false
          reorder: false
    soc_fast_limit:
      name: SOC Threshold "Fast Control" (e.g., 50%)
      default: 50
      description: The upper SOC value (e.g., 50%). Exceeding this starts the aggressive
        discharge cycle.
      selector:
        number:
          min: 21.0
          max: 100.0
          step: 1.0
          unit_of_measurement: '%'
          mode: slider
    soc_conservation_limit:
      name: SOC Threshold "Charge Priority" (e.g., 20%)
      default: 20
      description: The lower SOC value (e.g., 20%). Falling below this switches to
        "Disabled".
      selector:
        number:
          min: 0.0
          max: 49.0
          step: 1.0
          unit_of_measurement: '%'
          mode: slider
    zero_export_tolerance:
      name: Tolerance Range (Half-Width)
      default: 25
      description: The allowable range in Watts around the zero or offset point.
      selector:
        number:
          min: 10.0
          max: 200.0
          step: 10.0
          unit_of_measurement: W
          mode: slider
    adjustment_factor:
      name: Regulation Factor (Correction Speed)
      default: 1.5
      description: Defines the aggressiveness of the P-Controller.
      selector:
        number:
          min: 0.5
          max: 3.0
          step: 0.1
          mode: slider
    zero_point_offset:
      name: Zero Point Offset (Neg. forces Import)
      default: -30
      description: Negative Watt number to shift the zero point below the SOC threshold.
        (Only used in the conservative Zone 2)
      selector:
        number:
          min: -100.0
          max: 0.0
          step: 10.0
          unit_of_measurement: W
          mode: slider
    pv_charge_reserve:
      name: ðŸ”‹ PV Charge Reserve (Intermediate SOC)
      default: 50
      description: |
        The PV power to be reserved in Watts (W). This buffer compensates
        for internal converter losses and thus ensures guaranteed battery
        charging. (Only used in the conservative Zone 2)
      selector:
        number:
          min: 0.0
          max: 500.0
          step: 10.0
          unit_of_measurement: W
          mode: slider
    max_active_power_limit:
      name: Maximum Output Power (Hard Limit)
      default: 800
      description: The absolute limit for AC output power in Watts, regardless
        of the control. (Should match the maximum value of your Solakon ONE)
      selector:
        number:
          min: 0.0
          max: 1200.0
          step: 10.0
          unit_of_measurement: W
          mode: slider
  source_url: https://github.com/D4nte85/Solakon-One-Nulleinspeisung-Blueprint-homeassistant/blob/Solakon-ONE-Zero-Export/solakon_one_zeroexport.yaml
mode: queued
max_exceeded: silent
variables:
  solakon_mode: !input solakon_mode_select
  solakon_soc_sensor: !input solakon_soc_sensor
  pv_power_sensor: !input solakon_solar_power_sensor
  grid_power_sensor: !input shelly_grid_power_sensor
  timer_entity: !input solakon_mode_reset_timer_entity
  countdown_sensor: !input solakon_timeout_countdown_sensor
  solakon_power_limit_number: !input solakon_power_limit_number
  soc_start_limit: !input soc_fast_limit
  soc_stop_limit: !input soc_conservation_limit
  tolerance: !input zero_export_tolerance
  adj_factor: !input adjustment_factor
  offset_value: !input zero_point_offset
  cycle_active_helper: !input soc_entladezyklus_aktiv
  pv_reserve: !input pv_charge_reserve
  max_limit: !input max_active_power_limit
trigger:
- platform: state
  entity_id: !input shelly_grid_power_sensor
  for:
    seconds: 3
- platform: state
  entity_id: !input solakon_solar_power_sensor
  for:
    seconds: 3
- platform: numeric_state
  entity_id: !input solakon_soc_sensor
  above: !input soc_fast_limit
- platform: numeric_state
  entity_id: !input solakon_soc_sensor
  below: !input soc_conservation_limit
- platform: state
  entity_id: !input solakon_mode_select
- platform: numeric_state
  entity_id: !input solakon_timeout_countdown_sensor
  below: 150
condition: []
action:
- variables:
    # Preparatory variables for validation
    soc_value: '{{ states(solakon_soc_sensor) | float(-1) }}'
    timeout_value: '{{ states(countdown_sensor) | int(-1) }}'
    error_log_message: "Solakon ONE Blueprint Error:"

# --- CORRECTED VALIDATION: Choose Block (Reverting to 'data:' syntax for Log) ---
- choose:
  # 1. Case: SOC thresholds are invalid/swapped
  - conditions:
    - condition: template
      value_template: >
        {{ soc_start_limit | float(0) <= soc_stop_limit | float(0) }}
    sequence:
    - service: system_log.write
      data:
        logger: automation.solakon_zero_export
        level: error
        message: >
          {{ error_log_message }} The upper SOC threshold ({{ soc_start_limit }}%) must
          be greater than the lower SOC threshold ({{ soc_stop_limit }}%).
          Please adjust the values. Automation stopped.
    - stop: Invalid thresholds
      
  # 2. Case: Critical entities are unavailable
  - conditions:
    - condition: template
      value_template: >
        {{ soc_value == -1 or timeout_value == -1 or
          is_state(grid_power_sensor, 'unavailable') or
          is_state(solakon_power_limit_number, 'unavailable') }}
    sequence:
    - service: system_log.write
      data:
        logger: automation.solakon_zero_export
        level: error
        message: >
          {{ error_log_message }} One or more critical entities are UNAVAILABLE
          or have invalid values. Automation stopped.
    - stop: Critical entity unavailable
      
  default: []

# --- End of Validation Choose Block ---

- variables:
    # Initial variable definitions (after validation)
    cycle_active: '{{ is_state(cycle_active_helper, ''on'') }}'
    grid_power: '{{ states(grid_power_sensor) | float(0) }}'
    pv_power: '{{ states(pv_power_sensor) | float(0) }}'
    current_mode: '{{ states(solakon_mode) }}'
- choose:
  # --- 1. Fast Control & Discharge Cycle Start (SOC > Upper Threshold) ---
  - conditions:
    - condition: template
      value_template: '{{ soc_value > soc_start_limit | float(50) and not cycle_active
        }}'
    sequence:
    - service: input_select.select_option
      target:
        entity_id: !input soc_entladezyklus_aktiv
      data:
        option: 'on'
    - condition: template
      value_template: '{{ current_mode != ''INV Discharge (PV Priority)'' }}'
    - service: select.select_option
      target:
        entity_id: !input solakon_mode_select
      data:
        option: INV Discharge (PV Priority)
    - service: number.set_value
      target:
        entity_id: !input solakon_mode_reset_timer_entity
      data:
        value: 3599
  # --- 2. Safety Stop End & Discharge Cycle Stop (SOC <= Lower Threshold) ---
  - conditions:
    - condition: template
      value_template: '{{ soc_value <= soc_stop_limit | float(20) and cycle_active
        }}'
    sequence:
    - service: input_select.select_option
      target:
        entity_id: !input soc_entladezyklus_aktiv
      data:
        option: 'off'
    - condition: template
      value_template: '{{ current_mode != ''Disabled'' }}'
    - service: select.select_option
      target:
        entity_id: !input solakon_mode_select
      data:
        option: Disabled
    - service: number.set_value
      target:
        entity_id: !input solakon_power_limit_number
      data:
        value: 0
  # --- 3. Safety Stop (SOC < Lower Threshold AND Cycle Inactive) ---
  - conditions:
    - condition: template
      value_template: '{{ soc_value < soc_stop_limit | float(20) and not cycle_active and current_mode != ''Disabled'' }}'
    sequence:
    - service: select.select_option
      target:
        entity_id: !input solakon_mode_select
      data:
        option: Disabled
    - service: number.set_value
      target:
        entity_id: !input solakon_power_limit_number
      data:
        value: 0
  # --- 4. Battery-Conserving Control (Intermediate SOC AND Cycle Inactive) ---
  - conditions:
    - condition: template
      value_template: '{{ soc_value > soc_stop_limit | float(20) and soc_value <= soc_start_limit | float(50) and not cycle_active and current_mode != ''INV Discharge (PV Priority)'' }}'
    sequence:
    - service: select.select_option
      target:
        entity_id: !input solakon_mode_select
      data:
        option: INV Discharge (PV Priority)
    - service: number.set_value
      target:
        entity_id: !input solakon_power_limit_number
      data:
        value: 0
  # --- 5. Active Control (Only when mode INV Discharge (PV Priority) is active) ---
  - conditions:
    - condition: template
      value_template: '{{ current_mode == "INV Discharge (PV Priority)" }}'
    sequence:
    # NEW: Timeout Reset is executed here with priority (independent of the P-Control tolerance condition)
    - variables:
        # Declare variables needed for the reset
        soc_zone_1_or_2: >
            {{
              cycle_active or
              (soc_value >= soc_stop_limit | float(20) and soc_value <= soc_start_limit | float(50))
            }}
    - choose: # Timeout Reset (Prioritized)
      - conditions:
        - condition: template
          value_template: '{{ soc_zone_1_or_2 }}'
        - condition: template
          value_template: '{{ timeout_value < 120 and timeout_value != -1 }}' # Additional check
        sequence:
        - service: number.set_value
          target:
            entity_id: !input solakon_mode_reset_timer_entity
          data:
            value: 1
        - delay:
            # Delay increased for a more reliable impulse
            milliseconds: 300
        - service: number.set_value
          target:
            entity_id: !input solakon_mode_reset_timer_entity
          data:
            value: 3599
      default: []

    # P-Control is executed AFTER THIS:
    - variables:
        tolerance_float: '{{ tolerance | float(25) }}'
        # CORRECTED: The offset value from the input (e.g., -30) is multiplied by -1
        # to be positive (+30) in the calculation, as POSITIVE grid_power values mean Import.
        offset: '{{ offset_value | float(-30) * -1 if soc_value < soc_start_limit | float(50) else 0.0 }}'
        # Tolerance limits are based on the (possibly shifted) offset value
        tolerance_high: '{{ offset + tolerance_float }}'
        tolerance_low: '{{ offset - tolerance_float }}'
        current_limit: '{{ states(solakon_power_limit_number) | float(0) }}'

    - choose:
      # --- 5a. Aggressive P-Control (Cycle Active or SOC High) ---
      - conditions:
        - condition: template
          value_template: '{{ cycle_active or soc_value > soc_start_limit | float(50) }}'
        sequence:
        - variables:
            # Deviation is grid_power - Offset (here 0)
            reg_deviation: '{{ grid_power | float(0) - offset | float(0) }}'
            # CORRECTED: Addition, as pos. deviation (Import) requires an INCREASE in the limit
            new_limit_calc: '{{ current_limit + reg_deviation * adj_factor }}' # <-- CORRECTED LINE
        - condition: template
          value_template: >
            {{ grid_power > tolerance_high or
              grid_power < tolerance_low }}
        - service: number.set_value
          target:
            entity_id: !input solakon_power_limit_number
          data:
            # Limit: [ new_limit_calc, 0 ] | max for lower limit, then min(max_limit) for upper limit
            value: '{{ [ min(new_limit_calc | float(0), max_limit | float(800)), 0 ] | max | round(0) }}'
        
      # --- 5b. Battery-Conserving P-Control (Intermediate SOC and Cycle Inactive) ---
      - conditions:
        - condition: template
          value_template: >
            {{ not cycle_active and
              soc_value >= soc_stop_limit | float(20) and
              soc_value <= soc_start_limit | float(50) }}
        sequence:
        - variables:
            # Deviation is grid_power - Offset (here the NEW calculated positive offset value, e.g., +30)
            reg_deviation: '{{ grid_power | float(0) - offset | float(30) }}'
            # CORRECTED: Addition, as pos. deviation (strong Import) requires an INCREASE in the limit
            new_limit_calc: '{{ current_limit + reg_deviation * adj_factor }}' # <-- CORRECTED LINE
            # Dynamic limit: Discharge must not exceed PV generation minus reserve
            max_limit_zone2: '{{ pv_power | float(0) - pv_reserve | float(pv_reserve) }}'
        - condition: template
          # Only execute control if grid power is outside the tolerated range
          value_template: >
            {{ grid_power > tolerance_high or
              grid_power < tolerance_low }}
        - service: number.set_value
          target:
            entity_id: !input solakon_power_limit_number
          data:
            # The Limit: [ new_limit_calc, 0 ] | max for lower limit, then min(max_limit_zone2 and Global Max Limit) for upper limit
            value: >
              {{ [
                  min(new_limit_calc | float(0), [max_limit_zone2 | float(0), max_limit | float(800)] | min),
                  0
                ] | max | round(0) }}
