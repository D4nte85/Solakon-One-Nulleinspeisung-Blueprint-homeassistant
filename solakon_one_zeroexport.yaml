blueprint:
  name: Solakon ONE Zero Export âš¡ (V115)
  description: |
    **Detailed Function Description: Dynamic Zero Export with SOC Zone Logic**

    This Blueprint controls the AC output power limit (AC-Output-Limit) of the Solakon ONE inverter. The goal is dynamic **zero export** using a Proportional Controller (P-Regulator) while simultaneously managing the battery efficiently through a **three-tiered State-of-Charge (SOC) logic**.

    ---
    ### ðŸ§  P-Regulator & Control Logic
    * **Measurement Principle (P-Control):** The control operates as a **Proportional Controller (P-Regulator)** based on the **Shelly/Grid Power Sensor** entity. The grid power is the control deviation:
      * **Positive Grid Power** (Export/Feed-in): Increase in AC Output Power.
      * **Negative Grid Power** (Consumption/Draw): Decrease in AC Output Power.
    * **Correction Tendency:** The aggressiveness of the reaction is controlled via the **Adjustment Factor**.
    * **Trigger:** The automation is triggered by changes in grid power (with 3s stability), SOC thresholds, and mode changes.
    * **Power Limitation:** The regulated output power is now secured by an **upper limit** (`max_active_power_limit`) and a **hardcoded lower limit of 0 W**.

    ---
    ### ðŸ”‹ Three-Tiered SOC Zone Logic

    #### 1. Fast Control & Discharge Cycle (SOC > Upper Threshold OR Cycle Active)
    * **Condition:** The SOC is above the **Upper Threshold** (`soc_fast_limit`, Default: 50%) OR the discharge cycle is already active.
    * **Mode:** "INV Discharge (PV Priority)".
    * **Control:** **Aggressive P-Control** with a **Zero-Point Offset of 0 W**. Controls discharge and exact zero export.
    * **Remote Timeout:** The timer is reset to 3599 seconds when it falls below 120 seconds.

    #### 2. Battery-Conserving Control (Intermediate SOC and Cycle Inactive)
    * **Condition:** The SOC is between the **Lower Threshold** (20%) and the **Upper Threshold** (50%), and the discharge cycle is inactive.
    * **Mode:** "INV Discharge (PV Priority)".
    * **Control:** **Threshold Control** with **Charge Priority**. **No P-Regulator** is applied. The **Zero-Point Offset** (`nulleinspeisung_offset`, Default: -30 W) shifts the target point into slight **grid consumption**. The output power limit is only **activated** when the grid export exceeds the **shifted tolerance range** to prioritize battery charging.
    * **PV Charge Reserve:** The discharge power is additionally reduced by the **PV Charge Reserve** (`pv_charge_reserve`) to reserve a portion of the solar yield for battery charging.
    * **Remote Timeout:** The timer is also reset in this zone when it falls below 120 seconds.

    #### 3. Safety Stop (SOC <= Lower Threshold)
    * **Condition:** SOC falls below the **Lower Threshold** (`soc_conservation_limit`, Default: 20%).
    * **Mode:** "Disabled".
    * **Action:** The AC output power is immediately set to **0 W** and the discharge cycle ends.
  domain: automation
  author: AI-Assistent
  input:
    shelly_grid_power_sensor:
      name: Shelly/Grid Power Sensor (Shelly 3EM, etc.)
      description: The sensor that measures the grid power. (Must have 'power' device_class)
      selector:
        entity:
          filter:
            - domain:
                - sensor
              device_class:
                - power
          multiple: false
          reorder: false
    solakon_solar_power_sensor:
      name: Solakon ONE - Solar Power (PV Generation)
      description: |
        The sensor that displays the current solar generation in Watts. **(Default Entity: `sensor.solakon_one_pv_power`)**
      selector:
        entity:
          filter:
            - domain:
                - sensor
              device_class:
                - power
          multiple: false
          reorder: false
    solakon_soc_sensor:
      name: Solakon ONE - Battery State of Charge (SOC)
      description: |
        The SOC sensor of the Solakon ONE (%). **(Default Entity: `sensor.solakon_one_battery_soc`)**
      selector:
        entity:
          domain:
            - sensor
          multiple: false
          reorder: false
    solakon_power_limit_number:
      name: Solakon ONE - Output Power Controller (AC-Output)
      description: |
        The entity for controlling the charge/discharge power (target value). **(Default Entity: `number.solakon_one_remote_active_power`)**
      selector:
        entity:
          domain:
            - number
          multiple: false
          reorder: false
    solakon_mode_select:
      name: Solakon ONE - Operating Mode Selection
      description: |
        The entity for controlling the operating mode. **(Default Entity: `select.solakon_one_remote_mode`)**
      selector:
        entity:
          domain:
            - select
          multiple: false
          reorder: false
    solakon_mode_reset_timer_entity:
      name: Mode Reset Timer Entity (Solakon ONE - **Setter**)
      description: |
        The Solakon ONE **Number** entity that controls the time (in seconds, max. 3600). Used to **set/reset** the remote timeout. **(Default Entity: `number.solakon_one_remote_timeout_control`)**
      selector:
        entity:
          domain:
            - number
          multiple: false
          reorder: false
    solakon_timeout_countdown_sensor:
      name: Remote Timeout Countdown Sensor (Solakon ONE - **Reader**) ðŸŸ¢
      description: |
        The **Sensor** or **Number** entity that displays the currently remaining countdown value of the remote timeout in seconds.
      selector:
        entity:
          filter:
            - domain:
                - sensor
                - number # Correction
          multiple: false
          reorder: false
    soc_entladezyklus_aktiv:
      name: Discharge Cycle Status Storage (Input Select/Dropdown)
      description: Input Select Helper (MUST contain options 'on' and 'off').
      selector:
        entity:
          domain:
            - input_select
          multiple: false
          reorder: false
    soc_fast_limit:
      name: SOC Threshold "Fast Control" (e.g., 50%)
      default: 50
      description: The upper SOC value (e.g., 50%). If exceeded, the aggressive discharge cycle starts.
      selector:
        number:
          min: 21.0
          max: 100.0
          step: 1.0
          unit_of_measurement: '%'
          mode: slider
    soc_conservation_limit:
      name: SOC Threshold "Charge Priority" (e.g., 20%)
      default: 20
      description: The lower SOC value (e.g., 20%). If fallen below, the system switches to "Disabled".
      selector:
        number:
          min: 0.0
          max: 49.0
          step: 1.0
          unit_of_measurement: '%'
          mode: slider
    nulleinspeisung_toleranz:
      name: Tolerance Range (Half-Width)
      description: The permitted range in Watts around the zero point.
      default: 50
      selector:
        number:
          min: 10.0
          max: 200.0
          step: 10.0
          unit_of_measurement: W
          mode: slider
    anpassungs_faktor:
      name: Control Factor (Correction Speed)
      default: 1.5
      description: Defines the aggressiveness of the P-Regulator.
      selector:
        number:
          min: 0.5
          max: 3.0
          step: 0.1
          mode: slider
    nulleinspeisung_offset:
      name: Zero-Point Offset (Negative forces consumption)
      description: Negative Wattage to shift the zero point below the SOC threshold. (Only used in the conservative Zone 2)
      default: -30
      selector:
        number:
          min: -100.0
          max: 0.0
          step: 10.0
          unit_of_measurement: W
          mode: slider
    pv_charge_reserve:
      name: ðŸ”‹ PV Charge Reserve (Intermediate SOC)
      default: 15
      description: |
        The PV power to be reserved in Watts (W). This buffer compensates
        for internal converter losses, ensuring guaranteed battery charging. (Only used in the conservative Zone 2)
      selector:
        number:
          min: 0.0
          max: 500.0
          step: 10.0
          unit_of_measurement: W
          mode: slider
    max_active_power_limit:
      name: Maximum Output Power (Hard Limit)
      default: 800
      description: The absolute limit for AC output power in Watts, regardless of the control. (Should match the maximum value of your Solakon ONE)
      selector:
        number:
          min: 0.0
          max: 1200.0
          step: 10.0
          unit_of_measurement: W
          mode: slider
  source_url: https://raw.githubusercontent.com/D4nte85/Solakon-One-Nulleinspeisung-Blueprint-homeassistant/Solakon-ONE-Zero-Export/solakon_one_zeroexport.yaml
mode: queued
max_exceeded: silent
variables:
  solakon_mode: !input solakon_mode_select
  solakon_soc_sensor: !input solakon_soc_sensor
  pv_power_sensor: !input solakon_solar_power_sensor
  grid_power_sensor: !input shelly_grid_power_sensor
  timer_entity: !input solakon_mode_reset_timer_entity
  countdown_sensor: !input solakon_timeout_countdown_sensor
  soc_start_limit: !input soc_fast_limit
  soc_stop_limit: !input soc_conservation_limit
  tolerance: !input nulleinspeisung_toleranz
  adj_factor: !input anpassungs_faktor
  offset_value: !input nulleinspeisung_offset
  cycle_active_helper: !input soc_entladezyklus_aktiv
  pv_reserve: !input pv_charge_reserve
  max_limit: !input max_active_power_limit
trigger:
- platform: state
  entity_id: !input shelly_grid_power_sensor
  for:
    seconds: 3
- platform: numeric_state
  entity_id: !input solakon_soc_sensor
  above: !input soc_fast_limit
- platform: numeric_state
  entity_id: !input solakon_soc_sensor
  below: !input soc_conservation_limit
- platform: state
  entity_id: !input solakon_mode_select
condition: []
action:
- variables:
    cycle_active: '{{ is_state(cycle_active_helper, ''on'') }}'
    soc_value: '{{ states(solakon_soc_sensor) | float(-1) }}'
    grid_power: '{{ states(grid_power_sensor) | float(0) }}'
    pv_power: '{{ states(pv_power_sensor) | float(0) }}'
    current_mode: '{{ states(solakon_mode) }}'
    timeout_value: '{{ states(countdown_sensor) | int(0) }}'
- choose:
  # --- 1. Fast Control & Discharge Cycle Start (SOC > Upper Threshold) ---
  - conditions:
    - condition: template
      value_template: '{{ soc_value > soc_start_limit | float(50) and not cycle_active
        }}'
    sequence:
    - service: input_select.select_option
      target:
        entity_id: !input soc_entladezyklus_aktiv
      data:
        option: 'on'
    - condition: template
      value_template: '{{ current_mode != ''INV Discharge (PV Priority)'' }}'
    - service: select.select_option
      target:
        entity_id: !input solakon_mode_select
      data:
        option: INV Discharge (PV Priority)
    - service: number.set_value
      target:
        entity_id: !input solakon_mode_reset_timer_entity
      data:
        value: 3599
  # --- 2. Safety Stop End & Discharge Cycle Stop (SOC <= Lower Threshold) ---
  - conditions:
    - condition: template
      value_template: '{{ soc_value <= soc_stop_limit | float(20) and cycle_active
        }}'
    sequence:
    - service: input_select.select_option
      target:
        entity_id: !input soc_entladezyklus_aktiv
      data:
        option: 'off'
    - condition: template
      value_template: '{{ current_mode != ''Disabled'' }}'
    - service: select.select_option
      target:
        entity_id: !input solakon_mode_select
      data:
        option: Disabled
    - service: number.set_value
      target:
        entity_id: !input solakon_power_limit_number
      data:
        value: 0
  # --- 3. Safety Stop (SOC < Lower Threshold AND Cycle Inactive) ---
  - conditions:
    - condition: template
      value_template: '{{ soc_value < soc_stop_limit | float(20) and not cycle_active and current_mode != ''Disabled'' }}'
    sequence:
    - service: select.select_option
      target:
        entity_id: !input solakon_mode_select
      data:
        option: Disabled
    - service: number.set_value
      target:
        entity_id: !input solakon_power_limit_number
      data:
        value: 0
  # --- 4. Battery-Conserving Control (Intermediate SOC AND Cycle Inactive) ---
  - conditions:
    - condition: template
      value_template: '{{ soc_value > soc_stop_limit | float(20) and soc_value <= soc_start_limit | float(50) and not cycle_active and current_mode != ''INV Discharge (PV Priority)'' }}'
    sequence:
    - service: select.select_option
      target:
        entity_id: !input solakon_mode_select
      data:
        option: INV Discharge (PV Priority)
    - service: number.set_value
      target:
        entity_id: !input solakon_power_limit_number
      data:
        value: 0
  # --- 5. Active Control (Only if mode INV Discharge (PV Priority) is active) ---
  - conditions:
    - condition: template
      value_template: '{{ current_mode == "INV Discharge (PV Priority)" }}'
    sequence:
    - variables:
        tolerance_float: '{{ tolerance | float(50) }}'
        offset: '{{ offset_value | float(-30) if soc_value < soc_start_limit | float(50)
          else 0.0 }}'
        tolerance_low: '{{ offset - tolerance_float }}'
        tolerance_high: '{{ offset + tolerance_float }}'
    - choose:
      # --- 5a. Aggressive P-Control (Cycle Active or High SOC) ---
      - conditions:
        - condition: template
          value_template: '{{ cycle_active or soc_value > soc_start_limit | float(50)
            }}'
        sequence:
        - choose: # Timeout Reset
          - conditions:
            - condition: template
              value_template: '{{ timeout_value < 120 }}'
            sequence:
            - service: number.set_value
              target:
                entity_id: !input solakon_mode_reset_timer_entity
              data:
                value: 1
            - delay:
                milliseconds: 50
            - service: number.set_value
              target:
                entity_id: !input solakon_mode_reset_timer_entity
              data:
                value: 3599
          default: []
        - variables:
            current_limit: '{{ states(solakon_power_limit_number) | float(0) }}'
            new_limit: '{{ current_limit + grid_power * adj_factor }}'
        - condition: template
          value_template: "{{ grid_power > tolerance_high or\n  grid_power < tolerance_low
            }}"
        - service: number.set_value
          target:
            entity_id: !input solakon_power_limit_number
          data:
            # Limitation: [ new_limit, 0 ] | max for lower limit, then min(max_limit) for upper limit
            value: '{{ [ min(new_limit | float(0), max_limit | float(800)), 0 ] | max | round(0) }}'
      # --- 5b. Passive/Conserving Control (Intermediate SOC and Cycle Inactive) ---
      - conditions:
        - condition: template
          value_template: "{{ not cycle_active and\n  soc_value >= soc_stop_limit
            | float(20) and\n  soc_value <= soc_start_limit | float(50) }}"
        sequence:
        - choose: # Timeout Reset
          - conditions:
            - condition: template
              value_template: '{{ timeout_value < 120 }}'
            sequence:
            - service: number.set_value
              target:
                entity_id: !input solakon_mode_reset_timer_entity
              data:
                value: 1
            - delay:
                milliseconds: 50
            - service: number.set_value
              target:
                entity_id: !input solakon_mode_reset_timer_entity
              data:
                value: 3599
          default: []
        - variables:
            limit_calc: '{{ pv_power | float(0) - pv_reserve | float(0) }}'
            limit_value: '{{ iif(grid_power > offset + tolerance_float, [ limit_calc | float(0), grid_power ] | min, 0) }}'
        - service: number.set_value
          target:
            entity_id: !input solakon_power_limit_number
          data:
            # Limitation: [ limit_value, 0 ] | max for lower limit, then min(max_limit) for upper limit
            value: '{{ [ min(limit_value | float(0), max_limit | float(800)), 0 ] | max | round(0) }}'
