blueprint:
  name: Solakon ONE Zero Exportâš¡ (V158)
  description: |
    **Detailed Feature Description: Dynamic Zero Export with SOC Zone Logic**

    This Blueprint controls the AC Output Power Limit (AC-Output-Limit) of the Solakon ONE inverter. The goal is to achieve **dynamic zero export** via a Proportional Controller (P-Controller) while efficiently managing the battery using a **three-stage State-of-Charge (SOC) logic**.

    ---
    ### ðŸ§  P-Controller & Control Logic
    * **Measurement Principle (P-Control):** Regulation is performed as a **Proportional Controller (P-Controller)** based on the **Shelly/Grid Power Sensor** entity. **IMPORTANT:** It is assumed that **positive values mean grid draw** and **negative values mean grid export**.
      * **Positive Grid Power (Draw):** Increase AC output power.
      * **Negative Grid Power (Export):** Reduce AC output power.
    * **Correction Aggressiveness:** The reaction speed is controlled via the **Control Factor**.
    * **Power Limit:** The regulated output power is protected by an **upper limit** (`max_active_power_limit`) and a **hardcoded lower limit of 0 W**.

    ---
    ### ðŸ”‹ Three-Stage SOC Zone Logic

    #### 1. Fast Control & Discharge Cycle (SOC > Upper Threshold OR Cycle Active)
    * **Condition:** SOC is above the **Upper Threshold** (`soc_fast_limit`, default: 50%) OR the discharge cycle is already active.
    * **Mode:** "INV Discharge (PV Priority)".
    * **Control:** **Aggressive P-Control** with a **zero-point offset of 0 W**. Controls discharge and exact zero export.

    #### 2. Battery-Conserving Control (Intermediate SOC and PV Condition Met)
    * **Condition:** SOC is between the **Lower Threshold** (20%) and the **Upper Threshold** (50%), and the **discharge cycle is inactive** (important for P-Controller Zone 2).
      * **Start:** Switch to **"INV Discharge (PV Priority)"** only if the **PV Power strictly exceeds the PV Reserve**.
      * **Stop (Loop Protection):** Switch to **"Disabled"** and 0 W limit if the PV Power drops to or below the PV Reserve during operation.
    * **Control:** **Active P-Control** with a shifted zero point and charge priority. The **Zero Point Offset** (`nulleinspeisung_offset`, default: -30 W) shifts the control target towards slight **grid draw** (charging).
    * **PV Charging Priority (Dynamic Upper Limit):** The discharge power is dynamically limited by the **smaller value** of the P-Controller proposal and the **available PV Power minus the PV Reserve**.

    #### 3. Safety Stop (SOC <= Lower Threshold)
    * **Condition:** SOC drops below the **Lower Threshold** (`soc_conservation_limit`, default: 20%).
    * **Mode:** "Disabled".
    * **Action:** The AC output power is immediately set to **0 W** and the discharge cycle ends.

    ---
    ### ðŸ”„ Additional Control Mechanisms
    * **Optimized Timeout Reset on Mode Change:** Before a mode change is executed, a **two-stage pulse sequence** (`1s` pulse, then setting to `3599s`) is performed to ensure the critical mode command is accepted and to prevent timeout errors.
    * **Timeout Reset (Continuous):** The Remote Control Timeout (max. 3600s) is automatically **reset to 3599s** in the active discharge zones (1 and 2) as soon as the countdown drops below 120s.
    * **Triggers:** The automation is triggered by changes in grid power and PV power (with 3s stability), exceeding or falling below the SOC thresholds, mode changes, and the remote timeout countdown sensor (< 150s).
  domain: automation
  author: AI-Assistent
  input:
    shelly_grid_power_sensor:
      name: Shelly/Grid Power Sensor (Shelly 3EM or similar)
      description: The sensor measuring grid power. (Must have 'power' device_class)
      selector:
        entity:
          filter:
            - domain:
                - sensor
              device_class:
                - power
          multiple: false
          reorder: false
    solakon_solar_power_sensor:
      name: Solakon ONE - Solar Power (PV Generation)
      description: |
        The sensor showing the current solar generation in Watts. **(Default Entity: `sensor.solakon_one_total_pv_power`)**
      default: sensor.solakon_one_total_pv_power
      selector:
        entity:
          filter:
            - domain:
                - sensor
              device_class:
                - power
          multiple: false
          reorder: false
    solakon_soc_sensor:
      name: Solakon ONE - Battery Storage Capacity (SOC)
      description: |
        The SOC sensor of the Solakon ONE (%). **(Default Entity: `sensor.solakon_one_battery_soc`)**
      default: sensor.solakon_one_battery_soc
      selector:
        entity:
          domain:
            - sensor
          multiple: false
          reorder: false
    solakon_power_limit_number:
      name: Solakon ONE - Output Power Regulator (AC-Output)
      description: |
        The entity for controlling the charge/discharge power (setpoint). **(Default Entity: `number.solakon_one_remote_active_power`)**
      default: number.solakon_one_remote_active_power
      selector:
        entity:
          domain:
            - number
          multiple: false
          reorder: false
    solakon_mode_select:
      name: Solakon ONE - Operating Mode Selector
      description: |
        The entity for controlling the operating mode. **(Default Entity: `select.solakon_one_remote_control_mode`)**
      default: select.solakon_one_remote_control_mode
      selector:
        entity:
          domain:
            - select
          multiple: false
          reorder: false
    solakon_mode_reset_timer_entity:
      name: Mode Reset Timer Entity (Solakon ONE - **Setter**)
      description: |
        The Solakon ONE **Number** entity that controls the time (in seconds, max. 3600). Used to **set/reset** the Remote Timeout. **(Default Entity: `number.solakon_one_remote_timeout_set`)**
      default: number.solakon_one_remote_timeout_set
      selector:
        entity:
          domain:
            - number
          multiple: false
          reorder: false
    solakon_timeout_countdown_sensor:
      name: Remote Timeout Countdown Sensor (Solakon ONE - **Reader**) ðŸŸ¢
      description: |
        The **Sensor** or **Number** entity that shows the currently remaining countdown value of the Remote Timeout in seconds.
      default: sensor.solakon_one_remote_timeout_countdown
      selector:
        entity:
          filter:
            - domain:
                - sensor
                - number
          multiple: false
          reorder: false
    soc_entladezyklus_aktiv:
      name: Discharge Cycle State Helper (Input Select/Dropdown)
      description: Input Select Helper (MUST contain the options 'on' and 'off').
      default: input_select.soc_discharge_cycle_status
      selector:
        entity:
          domain:
            - input_select
          multiple: false
          reorder: false
    soc_fast_limit:
      name: SOC Threshold "Fast Control" (e.g., 50%)
      default: 50
      description: The upper SOC value (e.g., 50%). If exceeded, the aggressive discharge cycle starts.
      selector:
        number:
          min: 21.0
          max: 100.0
          step: 1.0
          unit_of_measurement: '%'
          mode: slider
    soc_conservation_limit:
      name: SOC Threshold "Charge Priority" (e.g., 20%)
      default: 20
      description: The lower SOC value (e.g., 20%). If dropped below, the mode switches to "Disabled".
      selector:
        number:
          min: 0.0
          max: 49.0
          step: 1.0
          unit_of_measurement: '%'
          mode: slider
    nulleinspeisung_toleranz:
      name: Tolerance Range (Half Width)
      default: 25
      description: The allowed range in Watts around the zero or offset point.
      selector:
        number:
          min: 10.0
          max: 200.0
          step: 10.0
          unit_of_measurement: W
          mode: slider
    anpassungs_faktor:
      name: Control Factor (Correction Speed)
      default: 1.5
      description: Defines the aggressiveness of the P-Controller.
      selector:
        number:
          min: 0.5
          max: 3.0
          step: 0.1
          mode: slider
    nulleinspeisung_offset:
      name: Zero Point Offset (Neg. forces Draw)
      default: -30
      description: Negative Watt value to shift the zero point below the SOC threshold. (Used only in the conserving Zone 2)
      selector:
        number:
          min: -100.0
          max: 0.0
          step: 10.0
          unit_of_measurement: W
          mode: slider
    pv_charge_reserve:
      name: ðŸ”‹ PV Charge Reserve (Intermediate SOC)
      default: 50
      description: |
        The PV power (in Watts, W) to be reserved. This buffer compensates for
        internal inverter losses and ensures guaranteed battery charging.
        (Used only in the conserving Zone 2)
      selector:
        number:
          min: 0.0
          max: 500.0
          step: 10.0
          unit_of_measurement: W
          mode: slider
    max_active_power_limit:
      name: Maximum Output Power (Hard Limit)
      default: 800
      description: The absolute limit for the AC output power in Watts, regardless of the control. (Should match the maximum value of your Solakon ONE)
      selector:
        number:
          min: 0.0
          max: 1200.0
          step: 10.0
          unit_of_measurement: W
          mode: slider
  source_url: https://github.com/D4nte85/Solakon-One-Nulleinspeisung-Blueprint-homeassistant/blob/Solakon-ONE-Zero-Export/solakon_one_zeroexport.yaml
mode: queued
max_exceeded: silent
variables:
  # The variable declaration follows the only reliably working way that Blueprints
  # function in Home Assistant; all other methods are flawed and throw errors.
  solakon_mode: !input solakon_mode_select
  solakon_soc_sensor: !input solakon_soc_sensor
  pv_power_sensor: !input solakon_solar_power_sensor
  grid_power_sensor: !input shelly_grid_power_sensor
  timer_entity: !input solakon_mode_reset_timer_entity
  countdown_sensor: !input solakon_timeout_countdown_sensor
  solakon_power_limit_number: !input solakon_power_limit_number
  soc_start_limit: !input soc_fast_limit
  soc_stop_limit: !input soc_conservation_limit
  tolerance: !input nulleinspeisung_toleranz
  adj_factor: !input anpassungs_faktor
  offset_value: !input nulleinspeisung_offset
  cycle_active_helper: !input soc_entladezyklus_aktiv
  pv_reserve: !input pv_charge_reserve
  max_limit: !input max_active_power_limit
trigger:
  - platform: state
    entity_id: !input shelly_grid_power_sensor
    for:
      seconds: 3
  - platform: state
    entity_id: !input solakon_solar_power_sensor
    for:
      seconds: 3
  - platform: numeric_state
    entity_id: !input solakon_soc_sensor
    above: !input soc_fast_limit
  - platform: numeric_state
    entity_id: !input solakon_soc_sensor
    below: !input soc_conservation_limit
  - platform: state
    entity_id: !input solakon_mode_select
  - platform: numeric_state
    entity_id: !input solakon_timeout_countdown_sensor
    below: 150
condition: []
action:
  - variables:
      # Preparatory variables for validation
      soc_value: '{{ states(solakon_soc_sensor) | float(-1) }}'
      timeout_value: '{{ states(countdown_sensor) | int(-1) }}'
      error_log_message: "Solakon ONE Blueprint Error:"

  # --- Input Validation ---
  - choose:
      # Case 1: SOC thresholds are invalid/swapped
    - conditions:
      - condition: template
        value_template: >
          {{ soc_start_limit | float(0) <= soc_stop_limit | float(0) }}
      sequence:
      - service: system_log.write
        data:
          logger: automation.solakon_zero_export
          level: error
          message: >
            {{ error_log_message }} The upper SOC threshold ({{ soc_start_limit }}%) must be
            greater than the lower SOC threshold ({{ soc_stop_limit }}%).
            Please adjust the values. Automation stopped.
      - stop: Invalid thresholds
        
      # Case 2: Critical entities are unavailable
    - conditions:
      - condition: template
        value_template: >
          {{ soc_value == -1 or timeout_value == -1 or
            is_state(grid_power_sensor, 'unavailable') or
            is_state(solakon_power_limit_number, 'unavailable') }}
      sequence:
      - service: system_log.write
        data:
          logger: automation.solakon_zero_export
          level: error
          message: >
            {{ error_log_message }} One or more critical entities are UNAVAILABLE
            or have invalid values. Automation stopped.
      - stop: Critical entity unavailable
        
    default: []

  # --- End of Validation Choose Block ---

  - variables:
      # Global variables for the control logic
      cycle_active: '{{ is_state(cycle_active_helper, ''on'') }}'
      grid_power: '{{ states(grid_power_sensor) | float(0) }}'
      pv_power: '{{ states(pv_power_sensor) | float(0) }}'
      current_mode: '{{ states(solakon_mode) }}'
      pv_reserve_float: '{{ pv_reserve | float(50) }}'

  # --- MODE SWITCHING AND CYCLE CONTROL (Sections 1-4) ---
  # This Choose block only controls the Select Mode and the Discharge Cycle Helper.
  - choose:
      
      # --- 1. Fast Control & Discharge Cycle Start (SOC > Upper Threshold) ---
    - conditions:
      - condition: template
        value_template: >
          {{ soc_value > soc_start_limit | float(50) and 
              not cycle_active }}
      sequence:
      - service: input_select.select_option
        target:
          entity_id: !input soc_entladezyklus_aktiv
        data:
          option: 'on'
      - choose: 
        - conditions:
          - condition: template
            value_template: '{{ current_mode != "INV Discharge (PV Priority)" }}'
          sequence:
          - service: number.set_value
            target:
              entity_id: !input solakon_mode_reset_timer_entity
            data:
              value: 1
          - delay:
              milliseconds: 300
          - service: number.set_value
            target:
              entity_id: !input solakon_mode_reset_timer_entity
            data:
              value: 3599
          - delay:
              milliseconds: 300
          - service: select.select_option
            target:
              entity_id: !input solakon_mode_select
            data:
              option: INV Discharge (PV Priority)
        default: []
        
      # --- 2. Safety Stop End & Discharge Cycle Stop (SOC <= Lower Threshold) ---
    - conditions:
      - condition: template
        value_template: '{{ soc_value <= soc_stop_limit | float(20) and cycle_active
          }}'
      sequence:
      - service: input_select.select_option
        target:
          entity_id: !input soc_entladezyklus_aktiv
        data:
          option: 'off'
      - choose:
        - conditions:
          - condition: template
            value_template: '{{ current_mode != ''Disabled'' }}'
          sequence:
          - service: number.set_value
            target:
              entity_id: !input solakon_mode_reset_timer_entity
            data:
              value: 1
          - delay:
              milliseconds: 300
          - service: number.set_value
            target:
              entity_id: !input solakon_mode_reset_timer_entity
            data:
              value: 3599
          - delay:
              milliseconds: 300
          - service: select.select_option
            target:
              entity_id: !input solakon_mode_select
            data:
              option: Disabled
        default: []
      - service: number.set_value
        target:
          entity_id: !input solakon_power_limit_number
        data:
          value: 0
          
      # --- 3. Safety Stop (SOC < Lower Threshold AND Cycle Inactive) ---
    - conditions:
      - condition: template
        value_template: '{{ soc_value < soc_stop_limit | float(20) and not cycle_active and current_mode != ''Disabled'' }}'
      sequence:
      - service: number.set_value
        target:
          entity_id: !input solakon_mode_reset_timer_entity
        data:
          value: 1
      - delay:
          milliseconds: 300
      - service: number.set_value
        target:
          entity_id: !input solakon_mode_reset_timer_entity
        data:
          value: 3599
      - delay:
          milliseconds: 300
      - service: select.select_option
        target:
          entity_id: !input solakon_mode_select
        data:
          option: Disabled
      - service: number.set_value
        target:
          entity_id: !input solakon_power_limit_number
        data:
          value: 0
          
      # --- 4. Battery-Conserving Control (Intermediate SOC and PV Condition) - START/STOP Logic ---
    - conditions:
      - condition: template
        value_template: >
          {{ soc_value > soc_stop_limit | float(20) and 
              soc_value <= soc_start_limit | float(50) and
              not cycle_active }}
      sequence:
      - choose:
          # --- 4a. START Conserving Control (PV > Reserve AND Mode is inactive) ---
        - conditions:
          - condition: template
            value_template: >
              {{ pv_power > pv_reserve_float and 
                  current_mode != "INV Discharge (PV Priority)" }}
          sequence:
          - service: number.set_value
            target:
              entity_id: !input solakon_mode_reset_timer_entity
            data:
              value: 1
          - delay:
              milliseconds: 300
          - service: number.set_value
            target:
              entity_id: !input solakon_mode_reset_timer_entity
            data:
              value: 3599
          - delay:
              milliseconds: 300
          - service: select.select_option
            target:
              entity_id: !input solakon_mode_select
            data:
              option: INV Discharge (PV Priority)
          - service: number.set_value
            target:
              entity_id: !input solakon_power_limit_number
            data:
              value: 0
              
          # --- 4b. STOP Conserving Control (PV <= Reserve AND Mode is active) ---
        - conditions:
          - condition: template
            value_template: >
              {{ pv_power <= pv_reserve_float and 
                  current_mode == "INV Discharge (PV Priority)" }}
          sequence:
          - service: number.set_value
            target:
              entity_id: !input solakon_mode_reset_timer_entity
            data:
              value: 1
          - delay:
              milliseconds: 300
          - service: number.set_value
            target:
              entity_id: !input solakon_mode_reset_timer_entity
            data:
              value: 3599
          - delay:
              milliseconds: 300
          - service: select.select_option
            target:
              entity_id: !input solakon_mode_select
            data:
              option: Disabled
          - service: number.set_value
            target:
              entity_id: !input solakon_power_limit_number
            data:
              value: 0
        default: []
          
    default: [] # Fallback for the outer Choose block

  # --- 5. Active Control (P-Controller and Timeout Reset) ---
  # This block is executed if the mode "INV Discharge (PV Priority)" is active.
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ current_mode == "INV Discharge (PV Priority)" }}'
      sequence:
      
      # 5.1 Timeout Reset (Continuous Refresh)
      - choose:
        - conditions:
          - condition: template
            value_template: '{{ timeout_value < 120 and timeout_value != -1 }}'
          sequence:
          - service: number.set_value
            target:
              entity_id: !input solakon_mode_reset_timer_entity
            data:
              value: 1
          - delay:
              milliseconds: 300
          - service: number.set_value
            target:
              entity_id: !input solakon_mode_reset_timer_entity
            data:
              value: 3599
          - delay:
              milliseconds: 300
        default: []
          
      # 5.2 P-Control: Decides which zone is active and applies the corresponding logic (Zone 2 first).
      - choose:
            
          # --- 5.2a Zone 2: Battery-Conserving (Intermediate SOC and Cycle Inactive - PREFERRED!) ---
        - conditions:
          - condition: template
            value_template: >
              {{ not cycle_active and
                soc_value >= soc_stop_limit | float(20) and
                soc_value <= soc_start_limit | float(50) }}
          sequence:
          - variables:
              # Offset value: Positive (e.g., 30W Draw)
              offset: '{{ offset_value | float(-30) * -1 }}'
              tolerance_high: '{{ offset + tolerance | float(25) }}'
              tolerance_low: '{{ offset - tolerance | float(25) }}'
                
          # Zone-specific tolerance check
          - condition: template
            value_template: >
              {{ grid_power > tolerance_high or grid_power < tolerance_low }}
                
          - variables:
              current_limit: '{{ states(solakon_power_limit_number) | float(0) }}'
              reg_deviation: '{{ grid_power | float(0) - offset | float(30) }}'
              new_limit_calc: '{{ current_limit + reg_deviation * adj_factor }}'
                
          - service: number.set_value
            target:
              entity_id: !input solakon_power_limit_number
            data:
              value: >
                {% set calculated_limit = new_limit_calc | float(0) %}
                
                {# Defines the upper limit: Minimum of Hard Limit and max(0, PV Power - PV Reserve). #}
                {% set dynamic_pv_limit = max(states(pv_power_sensor) | float(0) - pv_reserve | float(50), 0) %}
                {% set final_max_limit = min(max_limit | float(800), dynamic_pv_limit) %}
                
                {# Sends the minimum of the P-Controller value and the dynamic upper limit, at least 0 W. #}
                {{ max(min(calculated_limit, final_max_limit), 0) | round(0) }}
                  
            # --- 5.2b Zone 1: Aggressive (Cycle Active or High SOC - FALLBACK) ---
        - conditions:
          - condition: template
            value_template: '{{ cycle_active or soc_value > soc_start_limit | float(50) }}'
          sequence:
          - variables:
              # Offset value: 0.0 in the aggressive zone (1)
              offset: 0.0
              tolerance_high: '{{ offset + tolerance | float(25) }}'
              tolerance_low: '{{ offset - tolerance | float(25) }}'
                
          # Zone-specific tolerance check
          - condition: template
            value_template: >
              {{ grid_power > tolerance_high or grid_power < tolerance_low }}
                
          - variables:
              current_limit: '{{ states(solakon_power_limit_number) | float(0) }}'
              reg_deviation: '{{ grid_power | float(0) - offset | float(0) }}'
              new_limit_calc: '{{ current_limit + reg_deviation * adj_factor }}'

          - service: number.set_value
            target:
              entity_id: !input solakon_power_limit_number
            data:
              # Limit: Max of the calculated value and 0, then min of the global max limit
              value: '{{ [ min(new_limit_calc | float(0), max_limit | float(800)), 0 ] | max | round(0) }}'
                
        default: []
    default: []
